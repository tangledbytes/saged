{"version":3,"sources":["../../src/components/CodeEditor/supportedLanguages.ts","../../src/utility/ModResizeObserver.ts","../../src/components/CodeEditor/index.tsx","../../src/components/BlogEditor/CodeEditorWrapper/index.tsx","../../src/components/MarkdownEditor/index.tsx","../../src/components/BlogEditor/MarkdownEditorWrapper/index.tsx","../../src/components/BlogEditor/AtomicBlockWrapper/index.tsx","../../src/components/svgs/plus.tsx","../../src/components/BlogEditor/utility.ts","../../src/components/svgs/Wrapper.tsx","../../src/components/BlogEditor/SideToolbar/index.tsx","../../src/components/svgs/heading.tsx","../../src/components/svgs/subheading.tsx","../../src/components/svgs/blockquote.tsx","../../src/components/svgs/unorderedlist.tsx","../../src/components/svgs/orderedlist.tsx","../../src/components/svgs/code.tsx","../../src/components/svgs/markdown.tsx","../../src/components/BlogEditor/InlineToolbar/index.tsx","../../src/components/svgs/bold.tsx","../../src/components/svgs/italic.tsx","../../src/components/svgs/underline.tsx","../../src/components/Button/index.tsx","../../src/components/BlogEditor/index.tsx","App.js","useLocation.js","index.js"],"names":["SUPPORTED_LANGUAGES","abap","displayName","apex","bat","clojure","coffee","cpp","csharp","csp","css","dart","dockerfile","fsharp","go","graphql","handlebars","html","java","javascript","julia","kotlin","less","lexon","lua","markdown","mips","mysql","pascal","perl","pgsql","php","powershell","pug","python","r","ruby","rust","scss","shell","sophia","sql","swift","twig","typescript","vb","xml","yaml","_ResizeObserver","callback","_element","_cachedProperty","_interval","observe","this","setInterval","unobserve","clearInterval","_isDifferent","cachedProperty","height","property","width","top","left","bottom","right","x","y","ModResizeObserver","element","_observer","ResizeObserver","entries","entry","EditorBtn","onClick","name","options","setRef","active","className","Classes","editorBtn","e","ref","editorBtnName","SupportedLanguages","setDisplay","interrupt","onBlur","onFocus","useState","value","setValue","useRef","inputRef","useEffect","document","handleMouseDown","onClickHander","SL","slinputContainer","slinput","placeholder","onChange","sllist","Object","key","i","sl","Header","head","cbtns","style","backgroundColor","getHeight","renderFooter","CodeEditor","language","code","readOnly","footer","header","currentLanguage","setCurrentLanguage","editable","setEditable","displayOptions","setDisplayOptions","currentLanguageRef","containerRef","languageSelectorRef","setDisplayHandler","setCurrentLanguageHandler","observer","console","editor","option","currentNode","currentRef","targetNode","React","theme","editorDidMount","_valueGetter","CodeEditorWrapper","props","blockProps","block","contentState","init","setInit","contentStateRef","entityKey","data","newState","memoizedOnBlur","useCallback","memoizedOnFocus","newContentState","content","readonly","MarkdownEditorWrapper","onMouseEnter","onMouseLeave","DomPurify","marked","contentEditable","onInput","editorIsFocused","updateEditorState","AtomicBlockWrapper","entity","type","Markdown","viewBox","fill","xmlns","d","stroke","strokeLinecap","strokeLinejoin","getNodeFromKey","getAbsolutePosition","node","offsetTop","window","offsetLeft","rect","SVGWrapper","src","StyleButton","onToggle","label","subType","onMouseDown","BLOCK_TYPES","icon","fillRule","BlockStyleControls","editorState","selection","blockType","controls","idx","SideToolbar","editorRef","toggleBlockStyle","offSetLeft","offSetTop","position","setPostion","show","setShow","memoizedClickHandler","ev","start","currentContentBlock","currentContent","computedStyle","totalNodeHeight","parseInt","toolbarContainer","iconContainer","plusIcon","blockStyle","INLINE_STYLES","InlineStyleControls","currentStyle","initialPosition","InlineToolbar","editorPosition","toggleInlineStyle","selectionRect","target","error","getVisibleSelectionRect","offsetTopRem","offsetLeftRem","pageoffset","Button","blockStyleFn","ContentBlock","saveToLocalStorage","clearTimeout","timer","setTimeout","lstore","saveToLocalStorageHOF","retrieveFromLocalStorage","deserializeToContentState","convertFromRaw","JSON","storageKey","EditorState","oldContent","initializeEditorState","state","setState","editorIsUp","setEditorIsUp","DraftRef","DraftContainerRef","saveToStorageFn","convertToRaw","memoizedBlockRendererFn","component","onFinishEdit","RichUtils","contentStateWithEntity","newEditorState","AtomicBlockUtils","draftKey","atomicKey","atomicParent","divReferenceToAtomicParent","inlineStyle","spellCheck","keyBindingFn","getDefaultKeyBinding","handleKeyCommand","command","blockRendererFn","btn","stringify","App","initial","location","updateLocation","history","pushState","pathname","hash","useLocation","setLocation","path","localStorage","getItem","Switch","ReactDOM","render","getElementById"],"mappings":"0OAEaA,EAA6C,CACtDC,KAAM,CAAEC,YAAa,oDACrBC,KAAM,CAAED,YAAa,QACrBE,IAAK,CAAEF,YAAa,SACpBG,QAAS,CAAEH,YAAa,WACxBI,OAAQ,CAAEJ,YAAa,gBACvBK,IAAK,CAAEL,YAAa,OACpBM,OAAQ,CAAEN,YAAa,MACvBO,IAAK,CAAEP,YAAa,6CACpBQ,IAAK,CAAER,YAAa,OACpBS,KAAM,CAAET,YAAa,QACrBU,WAAY,CAAEV,YAAa,cAC3BW,OAAQ,CAAEX,YAAa,MACvBY,GAAI,CAAEZ,YAAa,eACnBa,QAAS,CAAEb,YAAa,WACxBc,WAAY,CAAEd,YAAa,cAC3Be,KAAM,CAAEf,YAAa,QACrBgB,KAAM,CAAEhB,YAAa,QACrBiB,WAAY,CAAEjB,YAAa,cAC3BkB,MAAO,CAAElB,YAAa,SACtBmB,OAAQ,CAAEnB,YAAa,UACvBoB,KAAM,CAAEpB,YAAa,QACrBqB,MAAO,CAAErB,YAAa,SACtBsB,IAAK,CAAEtB,YAAa,OACpBuB,SAAU,CAAEvB,YAAa,YACzBwB,KAAM,CAAExB,YAAa,QACrByB,MAAO,CAAEzB,YAAa,SACtB,cAAe,CAAEA,YAAa,eAC9B0B,OAAQ,CAAE1B,YAAa,UACvB2B,KAAM,CAAE3B,YAAa,QACrB4B,MAAO,CAAE5B,YAAa,SACtB6B,IAAK,CAAE7B,YAAa,OACpB,GAAI,CAAEA,YAAa,cACnB8B,WAAY,CAAE9B,YAAa,cAC3B+B,IAAK,CAAE/B,YAAa,OACpBgC,OAAQ,CAAEhC,YAAa,WACvBiC,EAAG,CAAEjC,YAAa,KAClBkC,KAAM,CAAElC,YAAa,QACrBmC,KAAM,CAAEnC,YAAa,QACrBoC,KAAM,CAAEpC,YAAa,QACrBqC,MAAO,CAAErC,YAAa,SACtBsC,OAAQ,CAAEtC,YAAa,SACvBuC,IAAK,CAAEvC,YAAa,OACpBwC,MAAO,CAAExC,YAAa,SACtByC,KAAM,CAAEzC,YAAa,QACrB0C,WAAY,CAAE1C,YAAa,cAC3B2C,GAAI,CAAE3C,YAAa,gBACnB4C,IAAK,CAAE5C,YAAa,OACpB6C,KAAM,CAAE7C,YAAa,S,2gCC5BnB8C,aAMF,cAAmB,KAAAC,WALX,KAAAC,SAAA,KACA,KAAAC,gBAAA,KACA,KAAAC,UAAA,K,2BAKRC,oB,WACIC,KAAA,WAEAA,KAAA,UAAiBC,aAAY,WAErB,YACA,eAAkB,WAFtB,0BAII,WAAc,EAAd,YALR,M,EAUJC,qBAEIF,KAAA,cAEIA,KAAJ,WAAoBG,cAAcH,KAAdG,Y,EAGhBC,yBACJ,IAAMC,EAAiBL,KAAKH,iBAAmB,EAAxB,GAChBG,KADP,iBAkBA,OAXAA,KAAA,gBAAuB,CACnBM,OAAQC,EADW,OAEnBC,MAAOD,EAFY,MAGnBE,IAAKF,EAHc,IAInBG,KAAMH,EAJa,KAKnBI,OAAQJ,EALW,OAMnBK,MAAOL,EANY,MAOnBM,EAAGN,EAPgB,EAQnBO,EAAGP,EAASO,KAGhB,IAGQT,WAA0BE,EAA1BF,QACAA,UAAyBE,EAF7B,Q,EAjDNb,GAiEeqB,aAIjB,cACI,GAJG,KAAAC,QAAA,KACA,KAAAC,UAAA,KAGH,eAAoB,CAQhBjB,KAAA,UAAiB,IAAIkB,gBALc,SAACC,GAChC,gCAA6B,KAAlBC,EAAkB,QACzBzB,EAASyB,EAATzB,iBAQRK,KAAA,UAAiB,IAAIN,EAArB,G,2BAIRK,oBACMC,KAAA,sB,EAGNE,sBACMF,KAAA,wB,EA3BWe,G,+KC7BrB,SAASM,EAAU,G,IACfC,YACAC,S,IACAC,mBAAUA,GAAA,EACVC,W,IACAC,kBAASA,GAAA,EAMT,OACI,yBAAKC,UAAWC,EAAQC,UAAWP,QALjB,SAACQ,GACnBR,MAI2DS,IAAKN,GAC3DD,GACG,yBACIG,UAAW,CAACC,EAAD,KAAeF,EAASE,EAAH,OAArB,2BAHvB,UAUI,yBAAKD,UAAWC,EAAQI,eAXhC,IAqBJ,SAASC,EAAmB,G,IACxBX,YACAY,eACAC,cACAC,WACAC,Y,EAE0BC,mBAAQ,IAA3BC,OAAOC,OACRT,EAAMU,iBAAZ,MACMC,EAAWD,iBAAjB,MAEAE,qBAAU,WAcN,OAbAC,yCACIF,EAAJ,UACIA,kBAA2B,YACvB,GAAaL,MAGjBK,iBAA0B,YACtB,GAAYN,MAGhBM,mBAGG,WACH,OAAOE,yCAAP,MAfRD,IAqBA,IAAME,EAAkB,SAACf,GACjBK,EAAUL,EAAd,IACKI,KAQHY,EAAgB,SAAChB,GACnBR,EAASQ,sBAATR,cAGJ,OACI,yBAAKK,UAAWC,EAAQmB,GAAIhB,IAAKA,GAC7B,yBAAKJ,UAAWC,EAAQoB,kBACpB,2BACIjB,IAAKW,EACLf,UAAWC,EAAQqB,QACnBC,YAAY,eACZX,MAAOA,EACPY,SAhBC,SAACrB,GACdU,EAAUV,SAAVU,WAkBI,yBAAKb,UAAWC,EAAQwB,QACnBC,OAAA,aAAqC,cAClC,IAAM9B,EAAO7E,KAAb,YACA,SAEQ6E,iCAEgBgB,EAHpB,qBAMQ,yBACIe,IAAKC,E,WACKC,EACVlC,QAASwB,GAJjB,GAgBR,KALQ,yBAAKQ,IAAKC,E,WAAaC,EAAIlC,QAASwB,GADxC,QAgBxB,SAASW,IACL,OACI,yBAAK9B,UAAWC,EAAQ8B,MACpB,yBACI/B,UAAWC,EAAQ+B,MACnBC,MAAO,CAAEC,gBAAiB,aAE9B,yBACIlC,UAAWC,EAAQ+B,MACnBC,MAAO,CAAEC,gBAAiB,aAE9B,yBACIlC,UAAWC,EAAQ+B,MACnBC,MAAO,CAAEC,gBAAiB,cAa1C,SAASC,EAAUC,EAAnB,GACI,IAAIzD,EAAJ,EAQA,OAJA,IAAkBA,GAFlB,KAIA,IAAkBA,GALlB,MAOA,EAKJ,SAAS0D,EAAW,G,QAChBC,oBAAWA,EAAA,eACXtC,c,IACAuC,gBAAOA,EAAA,K,IACPC,oBAAWA,GAAA,EACXhB,a,IACAiB,kBAASA,GAAA,E,IACTC,kBAASA,GAAA,E,IACT/D,kBAASA,EAAA,UACT8B,WACAC,Y,EAE8CC,mBAAQ,GAA/CgC,OAAiBC,O,EACQjC,oBAAQ,GAAjCkC,OAAUC,O,EAC2BnC,oBAAQ,GAA7CoC,OAAgBC,OAEjB5C,EAAMU,iBAAZ,MACMmC,EAAqBnC,iBAA3B,GACMoC,EAAepC,iBAArB,MACMqC,EAAsBrC,iBAA5B,MAGMsC,EAAoB,kBAAMJ,GAAN,IACpBK,EAA4B,SAACf,GAC/BW,YACAL,MAyDJ,OAtBA5B,qBAAU,WACNqC,OACD,CAFHrC,IAIAA,qBAAU,WACN,GAAIkC,EAAJ,QAA0B,CACtB,IAAMI,EAAW,IAAIlE,GAAkB,WACnCmE,mCACAnD,WAAeA,UAAfA,YAKJ,OAFAkD,UAAiBJ,EAAjBI,SAEO,WACHJ,WAAwBI,YAAmBJ,EAA3CA,SACAK,wCAIR,OAAO,eAfXvC,IAmBI,yBAAKhB,UAAWA,EAAWiC,MAAO,CAAEtD,UAAUyB,IAAK8C,GAC/C,yBAAKlD,UAAWC,EAAQuD,QACnBT,GACG,yBAAK/C,UAAWC,EAAQwD,QACpB,qBACIhD,OAAQA,EACRC,QAASA,EACTF,UA7CN,SAAC,EAAD,GAId,IAAMkD,EAAcC,EAApB,QACMC,EAAazD,EAAnB,OACA,SACKgD,wBACDO,WAFJ,KAwCoB/D,QAAS0D,EACT9C,WAAY6C,KAIvBV,GAAUmB,oBAZf,MAaI,uBACIhE,QAAS,CAAE2C,UAAWK,GACtBjC,MAAO2B,EACPD,SAAUK,EACVmB,MAAM,OACNC,eA1EI,SAACC,EAAD,GAChB5D,YACAA,+BAAgC,YAC5B,GAAYK,QAGhBL,gCAAiC,YAC7B,GAAaM,QAGjB,oBAAWc,GACPpB,mCAAoC,YAChCoB,EAASpB,UAAD,WAAyB6C,EAAjCzB,aA+DI7C,OAAM,eAAiBwD,EAAUM,EAA3B,YAETA,GACG,yBAAKzC,UAAWC,EAAQjB,SAClBwD,GACE,kCACI,qBACIzC,OAAQgD,EACRjD,OAAQqD,EACRxD,QAASyD,EACTxD,KACI7E,KACKE,YAET4E,SAAO,IAEX,qBACIE,QAAQ,EACRJ,QApGL,kBAAMmD,GAAN,IAqGKlD,KAAI,SAAWiD,QCjUnD,IAAMoB,EAAoB,SAACC,G,IACfC,EAAoCD,EAApCC,WAAYC,EAAwBF,EAAxBE,MAAOC,EAAiBH,EAAjBG,a,EACH1D,mBAAS,CAC7B4B,KAD6B,GAE7BD,SAAU6B,EAAW7B,WAFlBgC,OAAMC,OAQPC,EAAkB1D,iBAAxB,GACA0D,YAMAxD,qBAAU,WACN,IAAMyD,EAAYL,cAAlB,GAEA,KAAe,OACLM,EAAI,UAAGL,YAAH,uBAAGA,EAAb,UACMM,EAAW,CACbpC,KAAMmC,EADO,QAEbpC,SAAUoC,EAAKpC,UAEnBiC,QATRvD,IAkBA,IAAM4D,EAAiBC,uBAAY,WAC/BV,sBACD,CAFH,IAOMW,EAAkBD,uBAAY,WAChCV,sBACD,CAFH,IAIA,OACI,qBACIzB,QAAM,EACND,QAAM,EACNjB,SAAU,cACN,IAAMiD,EAAYL,cAAlB,GACMC,EAAeG,EAArB,QACA,KAAe,CACX,IAAMO,EAAkBV,EAAA,kBAEpB,CACIW,QADJ,EAEI1C,SAAUA,GAAY6B,EAAW7B,WAGzC6B,uBACGZ,qBAEXhB,KAAM+B,EAAK/B,KACX9B,OAAQmE,EACRlE,QAASoE,EACTxC,SAAUgC,EAAKhC,SACf3D,OAAQwF,EAAWxF,OACnB6D,SAAU2B,EAAWc,Y,WC7EjC,SAASC,EAAsB,G,IAC3BF,YACAC,aACAvE,YACAD,WACA0E,iBACAC,iBACA5D,a,EAE0Bb,mBAAiBqE,GAAT,IAA3BpE,OAAOC,OAERT,EAAMU,iBAAZ,MAwBA,OAtBAE,qBAAU,WACNH,EAASmE,GAATnE,IACIT,EAAJ,UACIA,oBAAwBiF,aAAmBC,IAAON,GAAlD5E,QACL,CAJHY,IAuBI,yBACIuE,iBAAkBN,EAClB7E,IAAKA,EACLJ,UAAWC,EACXS,QArBR,YACQN,EAAJ,UAAiBA,uBACjB,GAAaM,MAoBTD,OAjBR,YACQL,EAAJ,UACIA,oBAAwBiF,aAAmBC,IAA3ClF,KACJ,GAAYK,MAeR0E,aAAcA,EACdC,aAAcA,EACdI,QAdR,W,QACI3E,GAAS,UAAAT,EAAA,0CAATS,IACA,GAAcW,EAAQ,UAACpB,EAAD,4BAACA,EAAToB,cCjCtB,SAAS,EAAT,G,IACY2C,EAAoCD,EAApCC,WAAYC,EAAwBF,EAAxBE,MAAOC,EAAiBH,EAAjBG,a,EACH1D,mBAAS,CAC7BqE,QAAS,KADNV,OAAMC,OAIPkB,EAAkB3E,kBAAxB,GAKM0D,EAAkB1D,iBAAxB,GAoBA,aACQ2E,EAAJ,QAA6BtB,iBAA7B,GACUsB,EAAL,SAA8BtB,oBAGvC,OAxBAK,YAMAxD,qBAAU,WACN,IAAMyD,EAAYL,cAAlB,GACA,KAAe,OAELO,EAAW,CACbK,SAFM,UAAGX,YAAH,uBAAGA,EAAb,WAEkBW,SAElBT,QAPRvD,IAmBI,qBACIgE,QAASV,EAAKU,QACdC,SAAUd,EAAWc,SACrBvE,QAAS,WACL+E,aACAC,KAEJjF,OAAQ,WACJgF,aACAC,KAEJlE,SAAU,YACN,IAAMiD,EAAYL,cAAlB,GACMC,EAAeG,EAArB,QACA,KAAe,CACX,IAAMO,EAAkBV,EAAA,kBAEpB,CACIW,QAASA,IAGjBb,uBACGZ,gCC/DvB,SAASoC,EAAmBzB,GACxB,OAAKA,oBAAL,GAGA,WAFeA,yBAA6BA,oBAA5C,IACiB0B,UAATC,KAEGhC,qCAAP,IAGGA,qCAAP,IAPwCA,6BAAP,M,+YCTbiC,IACpB,OACI,yBACInH,OAAO,OACPE,MAAM,OACNkH,QAAQ,YACRC,KAAK,OACLC,MAAM,8BAEN,0BACIC,EAAE,oBACFC,OAAO,UACPC,cAAc,QACdC,eAAe,WCfxB,IAAMC,EAAiB,SAAC3E,GAC3B,OAAOV,2DAAP,IAGSsF,EAAsB,SAACC,GAChC,KAAU,CACN,IAAMC,EACFC,oBAAsBzF,yBAD1B,UAEM0F,EACFD,oBAAsBzF,yBAD1B,WAGM2F,EAAOJ,EAAb,wBAEA,MAAO,CACH1H,IAAK8H,MADF,EAEH7H,KAAM6H,OAAYD,GAI1B,MAAO,CAAE7H,IAAF,EAAUC,KAAM,I,SCTH8H,K,IAAaC,QAAQ5C,E,oIAAAA,YACzC,OAAOL,4CAAP,GCuBJ,IAAMkD,EAAc,SAAC,G,IACjBC,aACAjH,WACAkC,UACAgF,UACAC,YASIlH,EAAYC,EAAhB,YAKA,OAJA,IACID,GAAa,IAAMC,EAAnBD,cAIA,0BAAMA,UAAWA,EAAWmH,YAbR,SAAC,GAGrBhH,mBACA6G,EAAS/E,EAAT+E,KAQJ,IAOEI,EAAc,CAChB,CACIH,MAAO,qBAASjH,UAAWC,EAAQoH,KAAMP,IAAKjD,mB,WC3DlD,OACI,yBACIlF,OAAO,OACPE,MAAM,OACNkH,QAAQ,YACRC,KAAK,OACLC,MAAM,8BAEN,0BACIC,EAAE,6JACFF,KAAK,aDiDiCnC,QAC9C5B,MAAO,cAEX,CACIgF,MAAO,qBAASjH,UAAWC,EAAQoH,KAAMP,IAAKjD,mB,WE/DlD,OACI,yBACIlF,OAAO,OACPE,MAAM,OACNkH,QAAQ,YACRC,KAAK,OACLC,MAAM,8BAEN,0BACIC,EAAE,o7BACFF,KAAK,aFqDiCnC,QAC9C5B,MAAO,cAEX,CACIgF,MAAO,qBAASjH,UAAWC,EAAQoH,KAAMP,IAAKjD,mB,WGnElD,OACI,yBACIlF,OAAO,OACPE,MAAM,OACNkH,QAAQ,YACRC,KAAK,OACLC,MAAM,8BAEN,0BACIC,EAAE,kjFACFF,KAAK,aHyDiCnC,QAC9C5B,MAAO,cAEX,CACIgF,MAAO,qBAASjH,UAAWC,EAAQoH,KAAMP,IAAKjD,mB,WIvElD,OACI,yBACIlF,OAAO,OACPE,MAAM,OACNkH,QAAQ,YACRC,KAAK,OACLC,MAAM,8BAEN,0BACIC,EAAE,qiCACFF,KAAK,aJ6DiCnC,QAC9C5B,MAAO,uBAEX,CACIgF,MAAO,qBAASjH,UAAWC,EAAQoH,KAAMP,IAAKjD,mB,WK3ElD,OACI,yBACIlF,OAAO,OACPE,MAAM,OACNkH,QAAQ,YACRC,KAAK,OACLC,MAAM,8BAEN,0BACIC,EAAE,gOACFF,KAAK,aLiEiCnC,QAC9C5B,MAAO,qBAEX,CACIgF,MAAO,qBAASjH,UAAWC,EAAQoH,KAAMP,IAAKjD,mB,WM/ElD,OACI,yBACIlF,OAAO,OACPE,MAAM,OACNkH,QAAQ,YACRC,KAAK,OACLC,MAAM,8BAEN,0BACIC,EAAE,okBACFF,KAAK,aNqEiCnC,QAC9C5B,MAFJ,SAGIiF,QAAS,UAEb,CACID,MAAO,qBAASjH,UAAWC,EAAQoH,KAAMP,IAAKjD,mB,WOpFlD,OACI,yBACIlF,OAAO,OACPE,MAAM,OACNkH,QAAQ,YACR/F,UAAU,iBACVgG,KAAK,eACLC,MAAM,8BAEN,0BACIqB,SAAS,UACTpB,EAAE,kJAEN,0BACIoB,SAAS,UACTpB,EAAE,6HAEN,0BACIoB,SAAS,UACTpB,EAAE,kEAEN,0BAAMA,EAAE,yHP+DkCrC,QAC9C5B,MAFJ,SAGIiF,QAAS,aAIXK,EAAqB,SAACrD,G,IAChBsD,EAAgBtD,EAAhBsD,YACFC,EAAYD,EAAlB,eACME,EAAYF,qCAEEC,EAFFD,eAAlB,UAKA,OACI,yBAAKxH,UAAWC,EAAQ0H,UACnBP,EAAA,KAAgB,qBACb,qBACIzF,IAAQkE,EAAL,UAAmB+B,EACtB7H,OAAQ8F,UAAe6B,EACvBT,MAAOpB,EAAKoB,MACZD,SAAU9C,EAAM8C,SAChB/E,MAAO4D,EAAK5D,MACZiF,QAASrB,EAAKqB,eAQlC,SAASW,EAAY,G,IACjBrE,WACAsE,cACAC,qB,IACAC,sBAAaA,EAAA,I,IACbC,qBAAYA,EAAA,I,EAEmBtH,mBAAS,CAAE7B,IAAF,EAAUC,KAAM,IAAjDmJ,OAAUC,O,EACOxH,oBAAS,GAA1ByH,OAAMC,OACPjI,EAAMU,iBAAZ,MAOMwH,EAAuBzD,uBAAY,Y,OACrC,UAAIzE,EAAJ,4BAAIA,WAAsBmI,EAA1B,UACAF,QAFJ,IAmCA,OA9BArH,qBAAU,WAGN,OAFAC,yCAEO,kBACHA,yCADG,MAER,CALHD,IAOAA,qBAAU,WACN,IACMwH,EADiBhF,EAAvB,eACA,cAEMiF,EADiBjF,EAAvB,oBAC4BkF,eAA5B,GAEMlC,EAAOF,EACTmC,EADJ,UAIME,EAAgBjC,wBAAtB,GACMkC,EAAkBC,SAASF,EAAjC,QAEAR,EAAW,CACPpJ,MAAQ,GADD,EAEPD,IACI0H,YACAoC,EADApC,EAEA,GAFAA,EAGA,SAET,CAAChD,EArBJxC,IAwBI,yBAAKhB,UAAWC,EAAQ6I,iBAAkB7G,MAAK,SAC3C,yBACIjC,UAAWC,EAAQ8I,cACnBpJ,QAAS,kBAAM0I,GAAN,KAET,qBAASrI,UAAWC,EAAQ+I,SAAUlC,IAAKjD,6BAE/C,yBACIzD,IAAKA,EACLJ,UAAcC,EAAL,YACJmI,EAAsBnI,EADlB,KACGA,EAAR,OAGJ,qBACIuH,YAAahE,EACbwD,SAAU,cACNe,GACIA,EAAiBkB,EADrBlB,GAEAM,W,2DQlLxB,IA0CMtB,EAAc,SAAC,G,IAAEC,aAAUjH,WAAQkC,UAAOgF,UAQxCjH,EAAYC,EAKhB,OAJA,IACID,GAAa,IAAMC,GAInB,0BAAMD,UAAWA,EAAWmH,YAbR,SAAC,GAGrBhH,mBACA6G,OAQJ,IAOEkC,EAAgB,CAClB,CACIjC,MAAO,qBAASjH,UAAWC,EAAc6G,IAAKjD,mB,WCvElD,OACI,yBACIlF,OAAO,OACPE,MAAM,OACNkH,QAAQ,YACRC,KAAK,OACLC,MAAM,8BAEN,0BACIC,EAAE,wnBACFF,KAAK,aD6DiCnC,QAC9C5B,MAAO,QAEX,CACIgF,MAAO,qBAASjH,UAAWC,EAAc6G,IAAKjD,mB,WE3ElD,OACI,yBACIlF,OAAO,OACPE,MAAM,OACNkH,QAAQ,YACRC,KAAK,OACLC,MAAM,8BAEN,0BACIC,EAAE,mfACFF,KAAK,aFiEiCnC,QAC9C5B,MAAO,UAEX,CACIgF,MAAO,qBAASjH,UAAWC,EAAc6G,IAAKjD,mB,WG/ElD,OACI,yBACIlF,OAAO,OACPE,MAAM,OACNkH,QAAQ,YACRC,KAAK,OACLC,MAAM,8BAEN,0BACIC,EAAE,2uBACFF,KAAK,aHqEiCnC,QAC9C5B,MAAO,cAITkH,EAAsB,SAACjF,GACzB,IAAMkF,EAAelF,cAArB,wBAEA,OACI,yBAAKlE,UAAWC,GACXiJ,EAAA,KAAkB,qBACf,qBACIvH,IAAG,gBAAkBiG,EACrB7H,OAAQqJ,MAAiBvD,EAAjBuD,OACRnC,MAAOpB,EAAKoB,MACZD,SAAU9C,EAAM8C,SAChB/E,MAAO4D,EAAK5D,aAS1BoH,EAAkB,CAAEvK,KAAF,IAAaC,MAAO,KAI5C,SAASuK,EAAc,G,IACnB9F,WACAsE,cACAyB,mB,IACA9C,qBAAYA,EAAA,IAAI,E,IAChBE,sBAAaA,EAAA,IACb6C,sB,EAE+B7I,mBAAS0I,GAAjCnB,OAAUC,OAkCjB,OAhCAnH,qBAAU,WAGN,GAFuBwC,EAAvB,eAEA,cAyBI2E,SAzB+B,CAC/B,IAAMsB,EAnHc,WAC5B,IAAIC,EAAJ,KAIA,IAAI,MACMjC,EAAS,UAAGf,OAAH,mCAAGA,gBAAlB,kBACA,OAAIe,QAAJ,IAAIA,OAAJ,EAAIA,EAAJ,UACkCiC,EAA9B,IAAIjC,WAAmCA,EAAvC,GACcA,EAATiC,IAEX,MAAOC,GACLpG,iBAGJ,SAoG8BqG,GACtB,MAAoB,OAIpB,IAAMC,EAAe,GAArB,EACMC,EAAgB,GAAtB,EACMC,EACFrD,oBAAsBzF,yBAD1B,UAGAkH,EAAW,CACPrJ,IACI2K,QAEAF,EAFAE,IAFG,EAOP1K,KACI0K,OACAA,QADAA,EAEAF,EAFAE,KAGAK,OAKb,CAACtG,EA9BJxC,IAiCI,yBAAKhB,UAAWC,EAA0BgC,MAAK,SAC1CiG,QAAiBmB,EAAjBnB,KACG,qBACIV,YAAahE,EACbwD,SAAUwC,K,qBIjJ9B,SAASQ,EAAO,G,IAAEpK,SAAMI,cAAWL,YAC/B,OACI,4BACIA,QAASA,EACTK,UAAW,CAACC,EAAD,kBAHnB,GC4BJ,IAAMgK,GAAe,SAACC,GAElB,OADaA,EAAb,WAEI,iBACI,OAAOjK,EAAP,SACJ,iBACI,OAAOA,EAAP,SACJ,iBACI,OAAOA,EAAP,iBACJ,wBACI,OAAOA,EAAP,SACJ,0BACI,OAAOA,EAAP,SACJ,aACI,OAAOA,EAAP,aACJ,QACI,OAAOA,EAAP,aASNkK,Gf7C+B,WACjC,MAEA,OAAO,Y,QACHxI,eAAMA,EAAA,YACNqD,YAKAoF,gBACAC,EAAQC,YAAW,YACA5D,qBAAf,cACA6D,eAFJF,MekCmBG,GAKrBC,Gf/BK,Y,IAAG9I,QAEN,OADe+E,qBAAf,cACO6D,QAAP,Ie6CFG,GAA4B,SAAC1F,GAC/B,OAAO2F,yBAAeC,WAAtB,K,OAqCJ,SAAoB,G,IAChB3F,aACAD,YACAhF,c,IACA6K,sBAAaA,EAAA,Y,EAKalK,mBAtCA,SAAC,G,IAC3BqE,YACAC,aACA4F,eAOA,KACI,OAAOC,gCAA8BJ,GAArC,IAIJ,IAAMK,EAAaN,GAAyB,CAAE9I,IAAKkJ,IACnD,OAAIE,IAAJ,EACWD,gCACHJ,GADJ,IAOGI,cAAP,cAeIE,CAAsB,CAAEhG,QAAF,EAAW6F,WAAX,EAAuB5F,cAD1CgG,OAAOC,O,EAOsBvK,oBAAS,GAAtCwK,OAAYC,OAKbC,EAAWvK,iBAAjB,MAEMwK,EAAoBxK,iBAA1B,MAMMyK,EAAkB1G,uBAAY,WAChC,IA9EuBR,EA8EjBW,EAAUiG,EAAhB,oBACAd,GAAmB,CACfnF,SAhFmBX,EA+EJ,EA9EhBuG,eAAeY,uBAAtB,KAgFQ7J,IAAKkJ,MAEV,CANH,IAYMY,EAA0B5G,uBAAY,YAExC,cADaT,EAAb,UAEI,MAAO,CACHsH,UADG,EAEH7I,UAFG,EAGHqB,MAAO,CACH5B,SADG,aAEH3D,OAFG,QAGHsG,SAHG,EAIHmG,cAJG,EAKHO,aAAc,YACVT,EAASJ,gCAATI,SAZpB,IAoIA,OAjHAlK,qBAAU,WACNuK,MACD,CAACA,EAFJvK,IAkHI,yBACIZ,IAAKkL,EACLtL,UAAcC,EAAL,gBAA2BgF,GAAYhF,EAAvC,WAET,yBACID,UAAW,CAACC,EAAD,oBACXN,QA7CE,YACLsF,GAAYoG,EAAjB,SAAmCA,qBA8CzBpG,GACE,qBACI+C,WAAY,EACZC,UAAW,EACXzE,OAAQyH,EACRnD,UAAWuD,EACXtD,iBAvGI,SAACL,EAAD,GACpB,cAAIA,EACAwD,EAASU,8BADb,QAEK,CAED,IACMC,EADeZ,EAArB,oBAC+B,kCAG3B,CAAEpF,KAAMqB,IAENzC,EAAYoH,EAAlB,0BACMC,EAAiB,oBAAuB,CAC1CpD,eAAgBmD,IAEdlH,EAAWoH,yCAAjB,KAKAb,KAGA,IAAMnG,EAAkBJ,EAAxB,oBACMqH,EAAWjH,iBAAjB,SACMkH,EAAYlH,eAAlB,GAMAuF,YAAW,WACP,IAAM4B,EAAe5F,EAArB,GAEA,MAEI6F,2BALR7B,QA2EMrF,GACE,qBACIsE,eAAgBhD,EACZ+E,EAD+B,SAGnC9H,OAAQyH,EACRnD,UAAWuD,EACX7B,kBAjIM,SAAC4C,GACvBlB,EAASU,gCAATV,OAqIQ,4BACImB,YAAU,EACVjM,IAAKiL,EACL7I,SAAUyC,GAAYkG,EACtB3D,YAAayD,EACbzJ,SA9EQ,SAACyJ,GAAD,OAAwBC,EAAxB,IA+ERjB,aAAcA,GACdqC,aArDc,SAACnM,GAK3B,GAHAoL,IAGA,IAAIpL,UAQJ,OAAOoM,+BAAP,GAPI,IAAMT,EAAiBF,sBAAvB,GACIE,IAAJ,GACIZ,MA+CIsB,iBApES,SAACC,EAAD,GACrB,IAAM9H,EAAWiH,+BAAjB,GACA,YACIV,MACA,IAiEQwB,gBAAiBjB,MAGvBxG,GACE,qBACIrF,KAAK,YACLD,QAAS,kBAAM4D,YAAY0H,EAAlB,SACTjL,UAAWC,EAAQ0M,Q,SCnVjC3H,I,OAAU4F,KAAKgC,UAAUlI,KAgFhBmI,GA/BH,WAAM,MCtDH,SAACC,GAAa,IAAD,EACWnM,mBAASmM,GADpB,mBACjBC,EADiB,KACPC,EADO,KAOxB,MAAO,CAACD,EALR,SAAqBA,GACjBrG,OAAOuG,QAAQC,UAAU,CAAExI,KAAM,OAASqI,EAAUA,GACpDC,EAAetG,OAAOqG,SAASI,SAAWzG,OAAOqG,SAASK,QDoD9BC,CAC5B3G,OAAOqG,SAASI,SAAWzG,OAAOqG,SAASK,MAHjC,mBAEPL,EAFO,KAEGO,EAFH,KAMd,OACI,yBAAKtN,UAAU,aAtDR,SAACuN,GACZ,QAAQ,GACJ,IAAc,YAATA,EACD,OACI,yBAAKvN,UAAU,UACX,kBAAC,GAAD,CAAQgF,QAASA,MAG7B,IAAc,oBAATuI,EACD,OACI,yBAAKvN,UAAU,UACX,kBAAC,GAAD,CAAQgF,QAASA,GAASC,UAAQ,KAG9C,IAAc,mBAATsI,EACD,OACI,yBAAKvN,UAAU,UACX,kBAAC,GAAD,CAAQ6K,WAAW,iCAG/B,IAAc,2BAAT0C,EACD,OACI,yBAAKvN,UAAU,UACX,kBAAC,GAAD,CACIgF,QAASwI,aAAaC,QAClB,+BAEJxI,UAAQ,KAIxB,IAAc,uBAATsI,EACD,OACI,yBAAKvN,UAAU,UACX,kBAACqC,EAAD,CAAYK,QAAM,EAACD,QAAM,KAIrC,QACI,OACI,yBAAKzC,UAAU,sBACX,yBAAKA,UAAU,iBAAf,0BAcP0N,CAAOX,GACR,yBAAK/M,UAAU,iBACX,yBACIA,UAAU,MACVL,QAAS,WACL2N,EAAY,aAHpB,UAQA,yBACItN,UAAU,MACVL,QAAS,WACL2N,EAAY,cAHpB,cEpEhBK,IAASC,OAAO,kBAAC,GAAD,MAAS3M,SAAS4M,eAAe,U","file":"static/js/main.1ca872a9.chunk.js","sourcesContent":["import { ISupportedLanguageMap } from './index'\n\nexport const SUPPORTED_LANGUAGES: ISupportedLanguageMap = {\n    abap: { displayName: \"ABAP (Advanced Business Application Programming)\" },\n    apex: { displayName: \"Apex\" },\n    bat: { displayName: \"Batch\" },\n    clojure: { displayName: \"Clojure\" },\n    coffee: { displayName: \"CoffeeScript\" },\n    cpp: { displayName: \"C++\" },\n    csharp: { displayName: \"C#\" },\n    csp: { displayName: \"CSP (Communication Sequential Processing)\" },\n    css: { displayName: \"CSS\" },\n    dart: { displayName: \"Dart\" },\n    dockerfile: { displayName: \"Dockerfile\" },\n    fsharp: { displayName: \"F#\" },\n    go: { displayName: \"Go (Golang)\" },\n    graphql: { displayName: \"Graphql\" },\n    handlebars: { displayName: \"Handlebars\" },\n    html: { displayName: \"HTML\" },\n    java: { displayName: \"Java\" },\n    javascript: { displayName: \"JavaScript\" },\n    julia: { displayName: \"Julia\" },\n    kotlin: { displayName: \"Kotlin\" },\n    less: { displayName: \"Less\" },\n    lexon: { displayName: \"Lexon\" },\n    lua: { displayName: \"Lua\" },\n    markdown: { displayName: \"Markdown\" },\n    mips: { displayName: \"MIPS\" },\n    mysql: { displayName: \"MySQL\" },\n    \"objective-c\": { displayName: \"Objective-C\" },\n    pascal: { displayName: \"Pascal\" },\n    perl: { displayName: \"Perl\" },\n    pgsql: { displayName: \"PGSQL\" },\n    php: { displayName: \"PHP\" },\n    \"\": { displayName: \"Plain Text\" },\n    powershell: { displayName: \"PowerShell\" },\n    pug: { displayName: \"pug\" },\n    python: { displayName: \"Python3\" },\n    r: { displayName: \"R\" },\n    ruby: { displayName: \"Ruby\" },\n    rust: { displayName: \"Rust\" },\n    scss: { displayName: \"SCSS\" },\n    shell: { displayName: \"Shell\" },\n    sophia: { displayName: \"Sopia\" },\n    sql: { displayName: \"SQL\" },\n    swift: { displayName: \"Swift\" },\n    twig: { displayName: \"Twig\" },\n    typescript: { displayName: \"TypeScript\" },\n    vb: { displayName: \"Visual Basic\" },\n    xml: { displayName: \"XML\" },\n    yaml: { displayName: \"YAML\" }\n}\n","export type ModResizeObserverCb = (element?: Element) => any\n/**\n * DOMRectReadOnlyMod is the modified version of DOMRectReadOnly\n * interface as in it omits the toJSON method of the function\n */\nexport interface DOMRectReadOnlyMod {\n    height: number\n    width: number\n    top: number\n    left: number\n    bottom: number\n    right: number\n    x: number\n    y: number\n}\n\n/**\n * _ResizeObserver is a polling based resize observer\n * The API is very similar to the native resize observer\n * This observer is not performant as it keeps checking the size of\n * the provided element every 1 second (default value)\n */\nclass _ResizeObserver {\n    private _element: Element | null = null\n    private _cachedProperty: DOMRectReadOnlyMod | null = null\n    private _interval: NodeJS.Timeout | null = null\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public callback: ModResizeObserverCb) {}\n\n    observe(element: Element) {\n        this._element = element\n        // Poll every 1second\n        this._interval = setInterval(() => {\n            if (\n                this._element &&\n                this._isDifferent(this._element.getBoundingClientRect())\n            ) {\n                this.callback(this._element)\n            }\n        }, 1000)\n    }\n\n    unobserve() {\n        // Reset element\n        this._element = null\n        // Reset interval\n        if (this._interval) clearInterval(this._interval)\n    }\n\n    private _isDifferent(property: DOMRectReadOnly): boolean {\n        const cachedProperty = this._cachedProperty && {\n            ...this._cachedProperty\n        }\n\n        // Copied all the properties explicitly\n        // as it was difficult to copy the DOMRectReadOnly\n        // class instance\n        this._cachedProperty = {\n            height: property.height,\n            width: property.width,\n            top: property.top,\n            left: property.left,\n            bottom: property.bottom,\n            right: property.right,\n            x: property.x,\n            y: property.y\n        }\n\n        if (cachedProperty) {\n            // If height or width is changed then return true\n            return (\n                cachedProperty.height !== property.height ||\n                cachedProperty.width !== property.width\n            )\n        }\n\n        // If there is no cached propery then there is no change to observe\n        // hence there is no different\n        return false\n    }\n}\n\n/**\n * ModResizeOberver merges the native resize observer and\n * the polling based observer and hence provides a fallback\n */\nexport default class ModResizeObserver {\n    public element: Element | null = null\n    public _observer: _ResizeObserver | ResizeObserver | null = null\n\n    constructor(callback: ModResizeObserverCb) {\n        if (ResizeObserver) {\n            // If the native resize observer is available then\n            // use this observer as it is far more performant\n            const cb: ResizeObserverCallback = (entries) => {\n                for (const entry of entries) {\n                    callback(entry.target)\n                }\n            }\n            this._observer = new ResizeObserver(cb)\n        } else {\n            // If the native resize observer is not available then\n            // fallback to the polling mechanism\n            // Polling is inefficient and hence should be avoided\n            this._observer = new _ResizeObserver(callback)\n        }\n    }\n\n    observe(element: Element) {\n        ;(this._observer as _ResizeObserver | ResizeObserver).observe(element)\n    }\n\n    unobserve(element: Element) {\n        ;(this._observer as _ResizeObserver | ResizeObserver).unobserve(element)\n    }\n}\n","import React, { useState, useRef, useEffect, Fragment } from 'react'\nimport Manoco from '@monaco-editor/react'\nimport { SUPPORTED_LANGUAGES } from './supportedLanguages'\nimport ModResizeObserver from '../../utility/ModResizeObserver'\n\nimport Classes from './index.module.css'\n\n// =============================== INTERFACES =======================================\n\nexport interface EditorProps {\n    language?: string\n    code?: string\n    readOnly?: boolean\n    className?: string\n    onChange?: (content: any, language?: string) => void\n    header?: boolean\n    footer?: boolean\n    height?: string\n    onBlur?: (event?: any) => void\n    onFocus?: (event?: any) => void\n}\n\ninterface EditorBtnProps {\n    onClick: (e: React.MouseEvent) => void\n    name: string\n    active: boolean\n    setRef?: React.RefObject<HTMLDivElement>\n    options?: boolean\n}\n\ninterface SupportedLanguagesProps {\n    onClick: (language: string) => void\n    setDisplay: () => void\n    interrupt: (\n        e: MouseEvent,\n        currentRef: React.RefObject<HTMLDivElement>\n    ) => boolean\n    onBlur?: (event?: any) => void\n    onFocus?: (event?: any) => void\n}\n\nexport interface ISupportedLanguageMap {\n    [language: string]: {\n        displayName: string\n    }\n}\n\n// ========================================== CONSTANTS ===================================================\n\nexport { SUPPORTED_LANGUAGES }\n\n// ========================================== COMPONENTS ====================================================\n\n/**\n * EditorBtn renders the functional buttons present at the bottom of the\n * monaco editor\n * @param param0\n */\nfunction EditorBtn({\n    onClick,\n    name,\n    options = false,\n    setRef,\n    active = false\n}: EditorBtnProps) {\n    const onClickHander = (e: React.MouseEvent) => {\n        onClick(e)\n    }\n\n    return (\n        <div className={Classes.editorBtn} onClick={onClickHander} ref={setRef}>\n            {options && (\n                <div\n                    className={[Classes.icon, active ? Classes.active : null]\n                        .join(' ')\n                        .trimEnd()}\n                >\n                    &#9650;\n                </div>\n            )}\n            <div className={Classes.editorBtnName}>{name}</div>\n        </div>\n    )\n}\n\n/**\n * SupportedLanguages componenet renders the supported languages\n * menu along with the search component\n * @param param0\n */\nfunction SupportedLanguages({\n    onClick,\n    setDisplay,\n    interrupt,\n    onBlur,\n    onFocus\n}: SupportedLanguagesProps) {\n    const [value, setValue] = useState<string>('')\n    const ref = useRef<HTMLDivElement>(null)\n    const inputRef = useRef<HTMLInputElement>(null)\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleMouseDown)\n        if (inputRef.current) {\n            inputRef.current.onfocus = (ev) => {\n                if (onFocus) onFocus(ev)\n            }\n\n            inputRef.current.onblur = (ev) => {\n                if (onBlur) onBlur(ev)\n            }\n\n            inputRef.current.focus()\n        }\n\n        return () => {\n            return document.removeEventListener('mousedown', handleMouseDown)\n        }\n\n        // eslint-disable-next-line\n    }, [])\n\n    const handleMouseDown = (e: MouseEvent) => {\n        if (interrupt(e, ref)) return undefined\n        else setDisplay()\n        return undefined\n    }\n\n    const onChange = (e: React.ChangeEvent) => {\n        setValue((e.target as HTMLInputElement).value)\n    }\n\n    const onClickHander = (e: React.MouseEvent) => {\n        onClick((e.target as HTMLDivElement).getAttribute('data-lid') as string)\n    }\n\n    return (\n        <div className={Classes.SL} ref={ref}>\n            <div className={Classes.slinputContainer}>\n                <input\n                    ref={inputRef}\n                    className={Classes.slinput}\n                    placeholder='Set Language'\n                    value={value}\n                    onChange={onChange}\n                />\n            </div>\n            <div className={Classes.sllist}>\n                {Object.keys(SUPPORTED_LANGUAGES).map((sl, i) => {\n                    const name = SUPPORTED_LANGUAGES[sl].displayName\n                    if (value) {\n                        if (\n                            name\n                                .toLocaleLowerCase()\n                                .startsWith(value.toLocaleLowerCase())\n                        )\n                            return (\n                                <div\n                                    key={i}\n                                    data-lid={sl}\n                                    onClick={onClickHander}\n                                >\n                                    {name}\n                                </div>\n                            )\n                    } else {\n                        return (\n                            <div key={i} data-lid={sl} onClick={onClickHander}>\n                                {name}\n                            </div>\n                        )\n                    }\n                    return null\n                })}\n            </div>\n        </div>\n    )\n}\n\n/**\n * Header returns JSX for the header of the Monaco editor\n */\nfunction Header() {\n    return (\n        <div className={Classes.head}>\n            <div\n                className={Classes.cbtns}\n                style={{ backgroundColor: '#FF5F56' }}\n            />\n            <div\n                className={Classes.cbtns}\n                style={{ backgroundColor: '#FFBD2E' }}\n            />\n            <div\n                className={Classes.cbtns}\n                style={{ backgroundColor: '#27C93F' }}\n            />\n        </div>\n    )\n}\n\n// =========================================== HELPER FUNCTION ===========================================\n\n/**\n * getHeight returns the calcualated height for the editor\n * @param renderFooter\n * @param renderHeader\n */\nfunction getHeight(renderFooter: boolean, renderHeader: boolean) {\n    let height = 0\n    const HEADER_HEIGHT = 2.25 // If height of header is changed in CSS then change it here also\n    const FOOTER_HEIGHT = 1.5 // If height of footer is changed in CSS then change it here also\n\n    if (renderFooter) height += FOOTER_HEIGHT\n\n    if (renderHeader) height += HEADER_HEIGHT\n\n    return height\n}\n\n// =========================================== COMPONENT =================================================\n\nfunction CodeEditor({\n    language = 'javascript',\n    className,\n    code = '',\n    readOnly = false,\n    onChange,\n    footer = false,\n    header = false,\n    height = '20rem',\n    onBlur,\n    onFocus\n}: EditorProps) {\n    const [currentLanguage, setCurrentLanguage] = useState<string>(language)\n    const [editable, setEditable] = useState<boolean>(!readOnly)\n    const [displayOptions, setDisplayOptions] = useState<boolean>(false)\n\n    const ref = useRef<any>(null)\n    const currentLanguageRef = useRef<string>(currentLanguage)\n    const containerRef = useRef<HTMLDivElement>(null)\n    const languageSelectorRef = useRef<HTMLDivElement>(null)\n\n    const setEditableHandler = () => setEditable(!editable)\n    const setDisplayHandler = () => setDisplayOptions(!displayOptions)\n    const setCurrentLanguageHandler = (language: string) => {\n        currentLanguageRef.current = language\n        setCurrentLanguage(language)\n    }\n\n    const handleMount = (_valueGetter: any, editor: any) => {\n        ref.current = editor\n        ref.current.onDidBlurEditorText((ev: any) => {\n            if (onBlur) onBlur(ev)\n        })\n\n        ref.current.onDidFocusEditorText((ev: any) => {\n            if (onFocus) onFocus(ev)\n        })\n\n        if (typeof onChange === 'function') {\n            ref.current.onDidChangeModelContent((_: any) => {\n                onChange(ref.current.getValue(), currentLanguageRef.current)\n            })\n        }\n    }\n\n    const interrupt = (\n        e: MouseEvent,\n        currentRef: React.RefObject<HTMLDivElement>\n    ) => {\n        const currentNode = currentRef.current as Node\n        const targetNode = e.target as Node\n        if (\n            (languageSelectorRef.current as Node).contains(targetNode) ||\n            currentNode.contains(targetNode)\n        )\n            return true\n\n        return false\n    }\n\n    useEffect(() => {\n        setCurrentLanguageHandler(language)\n    }, [language])\n\n    useEffect(() => {\n        if (containerRef.current) {\n            const observer = new ModResizeObserver(() => {\n                console.log('Observing editor...')\n                ref.current && ref.current.layout()\n            })\n\n            observer.observe(containerRef.current)\n\n            return () => {\n                containerRef.current && observer.unobserve(containerRef.current)\n                console.log('Unobserve the editor...')\n            }\n        }\n\n        return () => undefined\n    }, [])\n\n    return (\n        <div className={className} style={{ height }} ref={containerRef}>\n            <div className={Classes.editor}>\n                {displayOptions && (\n                    <div className={Classes.option}>\n                        <SupportedLanguages\n                            onBlur={onBlur}\n                            onFocus={onFocus}\n                            interrupt={interrupt}\n                            onClick={setCurrentLanguageHandler}\n                            setDisplay={setDisplayHandler}\n                        />\n                    </div>\n                )}\n                {header && <Header />}\n                <Manoco\n                    options={{ readOnly: !editable }}\n                    value={code}\n                    language={currentLanguage}\n                    theme='dark'\n                    editorDidMount={handleMount}\n                    height={`calc(100% - ${getHeight(footer, header)}rem)`}\n                />\n                {footer && (\n                    <div className={Classes.bottom}>\n                        {!readOnly && (\n                            <Fragment>\n                                <EditorBtn\n                                    active={displayOptions}\n                                    setRef={languageSelectorRef}\n                                    onClick={setDisplayHandler}\n                                    name={\n                                        SUPPORTED_LANGUAGES[currentLanguage]\n                                            .displayName\n                                    }\n                                    options\n                                />\n                                <EditorBtn\n                                    active={false}\n                                    onClick={setEditableHandler}\n                                    name={`Edit: ${editable}`}\n                                />\n                            </Fragment>\n                        )}\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default CodeEditor\n","import React, { useEffect, useState, useCallback, useRef } from 'react'\nimport Editor from '../../CodeEditor'\n\n// =================================== INTERFACES ========================================\n\nexport interface ICodeEditorWrapper {\n    blockProps: {\n        language: string\n        height: string\n        readonly: boolean\n        setEditorIsUp: (state: boolean) => void\n        onFinishEdit: (contentState: any) => void\n    }\n    block: any\n    contentState: any\n}\n\n// =================================== COMPONENTS =========================================\n\n/**\n * A wrapper for the code editor\n * @param props\n */\nconst CodeEditorWrapper = (props: ICodeEditorWrapper) => {\n    const { blockProps, block, contentState } = props\n    const [init, setInit] = useState({\n        code: '',\n        language: blockProps.language\n    })\n\n    // Had to hold a reference to the latest value of contentstate\n    // as for some reason the callback functions were getting stale\n    // value of the this prop\n    const contentStateRef = useRef<any>(contentState)\n    contentStateRef.current = contentState\n\n    // This sets the initial code while also making sure\n    // that no \"code\" prop of the Editor is not\n    // directly associated with a wrapper prop\n    // Hence it avoids rerenders on each click\n    useEffect(() => {\n        const entityKey = block.getEntityAt(0)\n\n        if (entityKey) {\n            const data = contentState.getEntity(entityKey)?.getData()\n            const newState = {\n                code: data.content,\n                language: data.language\n            }\n            setInit(newState)\n        }\n\n        // eslint-disable-next-line\n    }, [])\n\n    /**\n     * Memoized implementation of onBlur handler\n     */\n    const memoizedOnBlur = useCallback(() => {\n        blockProps.setEditorIsUp(false)\n    }, [blockProps])\n\n    /**\n     * Memoized implementation of onFocus handler\n     */\n    const memoizedOnFocus = useCallback(() => {\n        blockProps.setEditorIsUp(true)\n    }, [blockProps])\n\n    return (\n        <Editor\n            header\n            footer\n            onChange={(code: string, language?: string) => {\n                const entityKey = block.getEntityAt(0)\n                const contentState = contentStateRef.current\n                if (entityKey) {\n                    const newContentState = contentState.mergeEntityData(\n                        entityKey,\n                        {\n                            content: code,\n                            language: language || blockProps.language\n                        }\n                    )\n                    blockProps.onFinishEdit(newContentState)\n                } else console.log('OOPS')\n            }}\n            code={init.code}\n            onBlur={memoizedOnBlur}\n            onFocus={memoizedOnFocus}\n            language={init.language}\n            height={blockProps.height}\n            readOnly={blockProps.readonly}\n        />\n    )\n}\n\nexport default CodeEditorWrapper\n","import React, { useRef, useEffect, useState } from 'react'\nimport marked from 'marked'\nimport DomPurify from 'dompurify'\nimport Classes from './index.module.css'\n\nexport interface IMarkdownEditor {\n    content: string\n    readonly?: boolean\n    onFocus?: (e?: React.FocusEvent<HTMLDivElement>) => any\n    onBlur?: (e?: React.FocusEvent<HTMLDivElement>) => any\n    onMouseEnter?: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>) => any\n    onMouseLeave?: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>) => any\n    onChange?: (content?: string) => any\n}\n\nfunction MarkdownEditorWrapper({\n    content,\n    readonly,\n    onFocus,\n    onBlur,\n    onMouseEnter,\n    onMouseLeave,\n    onChange\n}: IMarkdownEditor) {\n    const [value, setValue] = useState<string>(content || '')\n\n    const ref = useRef<HTMLDivElement>(null)\n\n    useEffect(() => {\n        setValue(content || '')\n        if (ref.current)\n            ref.current.innerHTML = DomPurify.sanitize(marked(content || ''))\n    }, [content])\n\n    function focusHandler(e: React.FocusEvent<HTMLDivElement>) {\n        if (ref.current) ref.current.innerHTML = value\n        if (onFocus) onFocus(e)\n    }\n\n    function blurHandler(e: React.FocusEvent<HTMLDivElement>) {\n        if (ref.current)\n            ref.current.innerHTML = DomPurify.sanitize(marked(value))\n        if (onBlur) onBlur(e)\n    }\n\n    function inputHander() {\n        setValue(ref.current?.innerText || '')\n        if (onChange) onChange(ref.current?.innerText)\n    }\n\n    return (\n        <div\n            contentEditable={!readonly}\n            ref={ref}\n            className={Classes.md}\n            onFocus={focusHandler}\n            onBlur={blurHandler}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onInput={inputHander}\n        />\n    )\n}\n\nexport default MarkdownEditorWrapper\n","import React, { useRef, useState, useEffect } from 'react'\nimport MarkdownEditor from '../../MarkdownEditor'\n\nexport interface IMarkdownEditorWrapper {\n    blockProps: {\n        readonly: boolean\n        content: string\n        setEditorIsUp: (state: boolean) => void\n        onFinishEdit: (contentState: any) => void\n    }\n    block: any\n    contentState: any\n}\n\nfunction MarkdownEditorWrapper(props: IMarkdownEditorWrapper) {\n    const { blockProps, block, contentState } = props\n    const [init, setInit] = useState({\n        content: ''\n    })\n\n    const editorIsFocused = useRef<boolean>(false)\n\n    // Had to hold a reference to the latest value of contentstate\n    // as for some reason the callback functions were getting stale\n    // value of the this prop\n    const contentStateRef = useRef<any>(contentState)\n    contentStateRef.current = contentState\n\n    // This sets the initial code while also making sure\n    // that no \"code\" prop of the Editor is not\n    // directly associated with a wrapper prop\n    // Hence it avoids rerenders on each click\n    useEffect(() => {\n        const entityKey = block.getEntityAt(0)\n        if (entityKey) {\n            const data = contentState.getEntity(entityKey)?.getData()\n            const newState = {\n                content: data.content\n            }\n            setInit(newState)\n        }\n\n        // eslint-disable-next-line\n    }, [])\n\n    function updateEditorState() {\n        if (editorIsFocused.current) blockProps.setEditorIsUp(true)\n        else if (!editorIsFocused.current) blockProps.setEditorIsUp(false)\n    }\n\n    return (\n        <MarkdownEditor\n            content={init.content}\n            readonly={blockProps.readonly}\n            onFocus={() => {\n                editorIsFocused.current = true\n                updateEditorState()\n            }}\n            onBlur={() => {\n                editorIsFocused.current = false\n                updateEditorState()\n            }}\n            onChange={(content) => {\n                const entityKey = block.getEntityAt(0)\n                const contentState = contentStateRef.current\n                if (entityKey) {\n                    const newContentState = contentState.mergeEntityData(\n                        entityKey,\n                        {\n                            content: content\n                        }\n                    )\n                    blockProps.onFinishEdit(newContentState)\n                } else console.log('OOPS MARKDOWN')\n            }}\n        />\n    )\n}\n\nexport default MarkdownEditorWrapper\n","import React, { Fragment } from 'react'\nimport CodeEditorWrapper from '../CodeEditorWrapper'\nimport MarkdownEditorWrapper from '../MarkdownEditorWrapper'\n\nexport interface IAtomicBlockWrapper {\n    blockProps: any\n    block: any\n    contentState: any\n}\n\nfunction AtomicBlockWrapper(props: IAtomicBlockWrapper) {\n    if (!props.block.getEntityAt(0)) return <Fragment />\n    const entity = props.contentState.getEntity(props.block.getEntityAt(0))\n    const { type } = entity.getData()\n    if (type === 'monaco') {\n        return <CodeEditorWrapper {...props} />\n    }\n\n    return <MarkdownEditorWrapper {...props} />\n}\n\nexport default AtomicBlockWrapper\n","import React from 'react'\n\nexport default function Markdown() {\n    return (\n        <svg\n            height='100%'\n            width='auto'\n            viewBox='0 0 16 16'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n        >\n            <path\n                d='M1 8H15M8 1V15V1Z'\n                stroke='#6212B2'\n                strokeLinecap='round'\n                strokeLinejoin='round'\n            />\n        </svg>\n    )\n}\n","export const getNodeFromKey = (key: string) => {\n    return document.querySelectorAll(`[data-offset-key=\"${key}-0-0\"]`)[0]\n}\n\nexport const getAbsolutePosition = (node: HTMLDivElement | null) => {\n    if (node) {\n        const offsetTop =\n            window.pageYOffset || document.documentElement.scrollTop\n        const offsetLeft =\n            window.pageXOffset || document.documentElement.scrollLeft\n\n        const rect = node.getBoundingClientRect()\n\n        return {\n            top: rect.top + offsetTop,\n            left: rect.left + offsetLeft\n        }\n    }\n\n    return { top: 0, left: 0 }\n}\n\nexport const saveToLocalStorageHOF = () => {\n    let timer: any\n\n    return ({\n        key = 'article',\n        content\n    }: {\n        key?: string\n        content: string\n    }) => {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n            const lstore = window.localStorage || localStorage\n            lstore.setItem(key, content)\n        }, 300)\n    }\n}\n\nexport const retrieveFromLocalStorageHOF = () => {\n    return ({ key }: { key: string }) => {\n        const lstore = window.localStorage || localStorage\n        return lstore.getItem(key)\n    }\n}\n","import React from 'react'\n\nexport interface ISVGWrapperProps\n    extends React.DetailedHTMLProps<\n        React.HTMLAttributes<HTMLDivElement>,\n        HTMLDivElement\n    > {\n    src: React.ReactNode\n}\n\nexport default function SVGWrapper({ src, ...props }: ISVGWrapperProps) {\n    return <div {...props}>{src}</div>\n}\n","import React, { useState, useEffect, useCallback, useRef } from 'react'\nimport Classes from './index.module.css'\nimport Plus from '../../svgs/plus'\nimport H1 from '../../svgs/heading'\nimport H2 from '../../svgs/subheading'\nimport Bq from '../../svgs/blockquote'\nimport Ul from '../../svgs/unorderedlist'\nimport Ol from '../../svgs/orderedlist'\nimport Code from '../../svgs/code'\nimport Md from '../../svgs/markdown'\nimport { getNodeFromKey } from '../utility'\nimport Wrapper from '../../svgs/Wrapper'\n\n// ==================================== INTERFACE ===============================\n\nexport interface ToolbarConfig {\n    editor: any\n    editorRef: any\n    toggleBlockStyle?: (blockType: string, subType?: string) => void\n    offSetLeft?: number\n    offSetTop?: number\n    children?: any\n}\n\ninterface IStyleButton {\n    onToggle: (style: string, subType?: string) => void\n    active: boolean\n    style: string\n    label: JSX.Element\n    subType?: string\n}\n\n// ==================================== HELPER COMPONENT ========================\n\nconst StyleButton = ({\n    onToggle,\n    active,\n    style,\n    label,\n    subType\n}: IStyleButton) => {\n    const onToggleHandler = (\n        e: React.MouseEvent<HTMLSpanElement, MouseEvent>\n    ) => {\n        e.preventDefault()\n        onToggle(style, subType)\n    }\n\n    let className = Classes.styleButton\n    if (active) {\n        className += ' ' + Classes.activeButton\n    }\n\n    return (\n        <span className={className} onMouseDown={onToggleHandler}>\n            {label}\n        </span>\n    )\n}\n\nconst BLOCK_TYPES = [\n    {\n        label: <Wrapper className={Classes.icon} src={<H1 />} />,\n        style: 'header-one'\n    },\n    {\n        label: <Wrapper className={Classes.icon} src={<H2 />} />,\n        style: 'header-two'\n    },\n    {\n        label: <Wrapper className={Classes.icon} src={<Bq />} />,\n        style: 'blockquote'\n    },\n    {\n        label: <Wrapper className={Classes.icon} src={<Ul />} />,\n        style: 'unordered-list-item'\n    },\n    {\n        label: <Wrapper className={Classes.icon} src={<Ol />} />,\n        style: 'ordered-list-item'\n    },\n    {\n        label: <Wrapper className={Classes.icon} src={<Code />} />,\n        style: 'atomic',\n        subType: 'monaco'\n    },\n    {\n        label: <Wrapper className={Classes.icon} src={<Md />} />,\n        style: 'atomic',\n        subType: 'markdown'\n    }\n]\n\nconst BlockStyleControls = (props: any) => {\n    const { editorState } = props\n    const selection = editorState.getSelection()\n    const blockType = editorState\n        .getCurrentContent()\n        .getBlockForKey(selection.getStartKey())\n        .getType()\n\n    return (\n        <div className={Classes.controls}>\n            {BLOCK_TYPES.map((type, idx) => (\n                <StyleButton\n                    key={`${type.style}-${idx}`}\n                    active={type.style === blockType}\n                    label={type.label}\n                    onToggle={props.onToggle}\n                    style={type.style}\n                    subType={type.subType}\n                />\n            ))}\n        </div>\n    )\n}\n// ==================================== COMPONENT ===============================\n\nfunction SideToolbar({\n    editor,\n    editorRef,\n    toggleBlockStyle,\n    offSetLeft = 2,\n    offSetTop = 1\n}: ToolbarConfig) {\n    const [position, setPostion] = useState({ top: 0, left: 0 })\n    const [show, setShow] = useState(false)\n    const ref = useRef<HTMLDivElement>(null)\n\n    /**\n     * memoizedClickHandler handles the mouse clicks\n     * Changes the state according to the location of\n     * mouse click\n     */\n    const memoizedClickHandler = useCallback((ev: MouseEvent) => {\n        if (ref.current?.contains(ev.target as Node)) return\n        setShow(false)\n    }, [])\n\n    useEffect(() => {\n        document.addEventListener('mousedown', memoizedClickHandler)\n\n        return () =>\n            document.removeEventListener('mousedown', memoizedClickHandler)\n    }, [memoizedClickHandler])\n\n    useEffect(() => {\n        const selectionState = editor.getSelection()\n        const start = selectionState.getStartKey()\n        const currentContent = editor.getCurrentContent()\n        const currentContentBlock = currentContent.getBlockForKey(start)\n\n        const node = getNodeFromKey(\n            currentContentBlock.getKey()\n        ) as HTMLDivElement\n\n        const computedStyle = window.getComputedStyle(node)\n        const totalNodeHeight = parseInt(computedStyle.height)\n\n        setPostion({\n            left: -(16 * offSetLeft),\n            top:\n                node.offsetTop +\n                totalNodeHeight / 2 +\n                16 * offSetTop -\n                16 / 1.25\n        })\n    }, [editor, editorRef])\n\n    return (\n        <div className={Classes.toolbarContainer} style={{ ...position }}>\n            <div\n                className={Classes.iconContainer}\n                onClick={() => setShow(!show)}\n            >\n                <Wrapper className={Classes.plusIcon} src={<Plus />} />\n            </div>\n            <div\n                ref={ref}\n                className={`${Classes.drawer} ${\n                    !show ? Classes.hide : Classes.show\n                }`}\n            >\n                <BlockStyleControls\n                    editorState={editor}\n                    onToggle={(blockStyle: string, subType?: string) => {\n                        toggleBlockStyle &&\n                            toggleBlockStyle(blockStyle, subType)\n                        setShow(false)\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default SideToolbar\n","import React from 'react'\n\nexport default function Heading() {\n    return (\n        <svg\n            height='100%'\n            width='auto'\n            viewBox='0 0 36 36'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n        >\n            <path\n                d='M16.5 10.5H19.5V25.5H16.5V19.5H10.5V25.5H7.5V10.5H10.5V16.5H16.5V10.5ZM26.355 10.5C25.4649 11.9242 24.0992 12.987 22.5 13.5V15H25.5V25.5H28.5V10.5H26.355Z'\n                fill='black'\n            />\n        </svg>\n    )\n}\n","import React from 'react'\n\nexport default function SubHeading() {\n    return (\n        <svg\n            height='100%'\n            width='auto'\n            viewBox='0 0 36 36'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n        >\n            <path\n                d='M13.5 10.5H16.5V25.5H13.5V19.5H7.5V25.5H4.5V10.5H7.5V16.5H13.5V10.5ZM25.5 22.5C26.265 21.885 26.4 21.57 27.09 20.925C27.7455 20.325 28.362 19.683 28.935 19.005C29.436 18.42 29.865 17.775 30.21 17.085C30.51 16.5 30.6675 15.852 30.675 15.195C30.6824 14.533 30.5441 13.8776 30.27 13.275C30.0041 12.6978 29.6149 12.1858 29.13 11.775C28.611 11.3503 28.0152 11.0295 27.375 10.83C26.6474 10.6005 25.8878 10.4891 25.125 10.5C24.585 10.5 24.0495 10.5495 23.52 10.65C23.0055 10.74 22.503 10.887 22.02 11.085C21.5636 11.2805 21.1308 11.527 20.73 11.82C20.3 12.1351 19.8892 12.4757 19.5 12.84L21.36 14.67C21.8219 14.2685 22.3246 13.9165 22.86 13.62C23.385 13.32 23.9805 13.164 24.585 13.17C25.2675 13.125 25.944 13.329 26.49 13.74C26.955 14.157 27.2055 14.766 27.165 15.39C27.144 15.984 26.955 16.56 26.625 17.055C26.1975 17.7347 25.6943 18.3637 25.125 18.93C24.465 19.575 23.655 20.31 22.74 21.075C21.825 21.84 20.625 22.665 19.5 23.55V25.5H31.5V22.5H25.5Z'\n                fill='black'\n            />\n        </svg>\n    )\n}\n","import React from 'react'\n\nexport default function Blockquote() {\n    return (\n        <svg\n            height='100%'\n            width='auto'\n            viewBox='0 0 36 36'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n        >\n            <path\n                d='M9.83884 15.955C9.50434 15.955 9.18334 16.006 8.86384 16.0525C8.96734 15.7045 9.07384 15.3505 9.24484 15.0325C9.41584 14.5705 9.68284 14.17 9.94834 13.7665C10.1703 13.33 10.5618 13.0345 10.8498 12.661C11.1513 12.298 11.5623 12.0565 11.8878 11.755C12.2073 11.44 12.6258 11.2825 12.9588 11.0605C13.3068 10.861 13.6098 10.6405 13.9338 10.5355L14.7423 10.2025L15.4533 9.907L14.7258 7L13.8303 7.216C13.5438 7.288 13.1943 7.372 12.7968 7.4725C12.3903 7.5475 11.9568 7.753 11.4738 7.9405C10.9968 8.1535 10.4448 8.2975 9.93184 8.6395C9.41584 8.9665 8.82034 9.2395 8.29534 9.6775C7.78684 10.129 7.17334 10.5205 6.72034 11.095C6.22534 11.632 5.73634 12.196 5.35684 12.838C4.91734 13.45 4.61884 14.122 4.30384 14.7865C4.01884 15.451 3.78934 16.1305 3.60184 16.7905C3.24634 18.1135 3.08734 19.3705 3.02584 20.446C2.97484 21.523 3.00484 22.4185 3.06784 23.0665C3.09034 23.3725 3.13234 23.6695 3.16234 23.875L3.19984 24.127L3.23884 24.118C3.50563 25.3642 4.1198 26.5095 5.01029 27.4213C5.90078 28.333 7.0312 28.9741 8.2708 29.2702C9.5104 29.5664 10.8085 29.5055 12.015 29.0948C13.2214 28.684 14.2869 27.94 15.0883 26.9489C15.8896 25.9579 16.3939 24.7602 16.543 23.4944C16.692 22.2287 16.4797 20.9466 15.9305 19.7965C15.3814 18.6464 14.5178 17.6753 13.4398 16.9955C12.3618 16.3156 11.1133 15.9549 9.83884 15.955V15.955ZM26.3388 15.955C26.0043 15.955 25.6833 16.006 25.3638 16.0525C25.4673 15.7045 25.5738 15.3505 25.7448 15.0325C25.9158 14.5705 26.1828 14.17 26.4483 13.7665C26.6703 13.33 27.0618 13.0345 27.3498 12.661C27.6513 12.298 28.0623 12.0565 28.3878 11.755C28.7073 11.44 29.1258 11.2825 29.4588 11.0605C29.8068 10.861 30.1098 10.6405 30.4338 10.5355L31.2423 10.2025L31.9533 9.907L31.2258 7L30.3303 7.216C30.0438 7.288 29.6943 7.372 29.2968 7.4725C28.8903 7.5475 28.4568 7.753 27.9738 7.9405C27.4983 8.155 26.9448 8.2975 26.4318 8.641C25.9158 8.968 25.3203 9.241 24.7953 9.679C24.2868 10.1305 23.6733 10.522 23.2203 11.095C22.7253 11.632 22.2363 12.196 21.8568 12.838C21.4173 13.45 21.1188 14.122 20.8038 14.7865C20.5188 15.451 20.2893 16.1305 20.1018 16.7905C19.7463 18.1135 19.5873 19.3705 19.5258 20.446C19.4748 21.523 19.5048 22.4185 19.5678 23.0665C19.5903 23.3725 19.6323 23.6695 19.6623 23.875L19.6998 24.127L19.7388 24.118C20.0056 25.3642 20.6198 26.5095 21.5103 27.4213C22.4008 28.333 23.5312 28.9741 24.7708 29.2702C26.0104 29.5664 27.3085 29.5055 28.515 29.0948C29.7214 28.684 30.7869 27.94 31.5883 26.9489C32.3896 25.9579 32.8939 24.7602 33.043 23.4944C33.192 22.2287 32.9797 20.9466 32.4305 19.7965C31.8814 18.6464 31.0178 17.6753 29.9398 16.9955C28.8618 16.3156 27.6133 15.9549 26.3388 15.955V15.955Z'\n                fill='black'\n            />\n        </svg>\n    )\n}\n","import React from 'react'\n\nexport default function UnorderedList() {\n    return (\n        <svg\n            height='100%'\n            width='auto'\n            viewBox='0 0 36 36'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n        >\n            <path\n                d='M12 6H31.5V9H12V6ZM6.75 9.75C6.15326 9.75 5.58097 9.51295 5.15901 9.09099C4.73705 8.66903 4.5 8.09674 4.5 7.5C4.5 6.90326 4.73705 6.33097 5.15901 5.90901C5.58097 5.48705 6.15326 5.25 6.75 5.25C7.34674 5.25 7.91903 5.48705 8.34099 5.90901C8.76295 6.33097 9 6.90326 9 7.5C9 8.09674 8.76295 8.66903 8.34099 9.09099C7.91903 9.51295 7.34674 9.75 6.75 9.75ZM6.75 20.25C6.15326 20.25 5.58097 20.0129 5.15901 19.591C4.73705 19.169 4.5 18.5967 4.5 18C4.5 17.4033 4.73705 16.831 5.15901 16.409C5.58097 15.9871 6.15326 15.75 6.75 15.75C7.34674 15.75 7.91903 15.9871 8.34099 16.409C8.76295 16.831 9 17.4033 9 18C9 18.5967 8.76295 19.169 8.34099 19.591C7.91903 20.0129 7.34674 20.25 6.75 20.25ZM6.75 30.6C6.15326 30.6 5.58097 30.3629 5.15901 29.941C4.73705 29.519 4.5 28.9467 4.5 28.35C4.5 27.7533 4.73705 27.181 5.15901 26.759C5.58097 26.3371 6.15326 26.1 6.75 26.1C7.34674 26.1 7.91903 26.3371 8.34099 26.759C8.76295 27.181 9 27.7533 9 28.35C9 28.9467 8.76295 29.519 8.34099 29.941C7.91903 30.3629 7.34674 30.6 6.75 30.6ZM12 16.5H31.5V19.5H12V16.5ZM12 27H31.5V30H12V27Z'\n                fill='black'\n            />\n        </svg>\n    )\n}\n","import React from 'react'\n\nexport default function OrderedList() {\n    return (\n        <svg\n            height='100%'\n            width='auto'\n            viewBox='0 0 36 36'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n        >\n            <path\n                d='M12 6H31.5V9H12V6ZM7.5 4.5V9H9V10.5H4.5V9H6V6H4.5V4.5H7.5ZM4.5 21V17.25H7.5V16.5H4.5V15H9V18.75H6V19.5H9V21H4.5ZM7.5 29.25H4.5V27.75H7.5V27H4.5V25.5H9V31.5H4.5V30H7.5V29.25ZM12 16.5H31.5V19.5H12V16.5ZM12 27H31.5V30H12V27Z'\n                fill='black'\n            />\n        </svg>\n    )\n}\n","import React from 'react'\n\nexport default function Code() {\n    return (\n        <svg\n            height='100%'\n            width='auto'\n            viewBox='0 0 36 36'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n        >\n            <path\n                d='M13.5 33H15V30H13.5165C13.0545 29.991 9 29.7405 9 24C9 21.0105 8.0025 19.131 6.747 18C8.0025 16.869 9 14.9895 9 12C9 6.2595 13.0545 6.009 13.5 6H15V3H13.497C10.9035 3.006 6 4.896 6 12C6 16.2 3.483 16.485 2.979 16.5L3 19.5C3.123 19.5 6 19.551 6 24C6 31.104 10.9035 32.994 13.5 33ZM33 16.5C32.877 16.5 30 16.449 30 12C30 4.896 25.0965 3.006 22.5 3H21V6H22.4835C22.9455 6.009 27 6.2595 27 12C27 14.9895 27.9975 16.869 29.253 18C27.9975 19.131 27 21.0105 27 24C27 29.7405 22.9455 29.991 22.5 30H21V33H22.503C25.0965 32.994 30 31.104 30 24C30 19.8 32.517 19.515 33.021 19.5L33 16.5Z'\n                fill='black'\n            />\n        </svg>\n    )\n}\n","import React from 'react'\n\nexport default function Markdown() {\n    return (\n        <svg\n            height='100%'\n            width='auto'\n            viewBox='0 0 16 16'\n            className='bi bi-markdown'\n            fill='currentColor'\n            xmlns='http://www.w3.org/2000/svg'\n        >\n            <path\n                fillRule='evenodd'\n                d='M14 3H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z'\n            />\n            <path\n                fillRule='evenodd'\n                d='M9.146 8.146a.5.5 0 0 1 .708 0L11.5 9.793l1.646-1.647a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 0-.708z'\n            />\n            <path\n                fillRule='evenodd'\n                d='M11.5 5a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0v-4a.5.5 0 0 1 .5-.5z'\n            />\n            <path d='M3.56 11V7.01h.056l1.428 3.239h.774l1.42-3.24h.056V11h1.073V5.001h-1.2l-1.71 3.894h-.039l-1.71-3.894H2.5V11h1.06z' />\n        </svg>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport Classes from './index.module.css'\nimport Bold from '../../svgs/bold'\nimport Italic from '../../svgs/italic'\nimport Underline from '../../svgs/underline'\nimport Wrapper from '../../svgs/Wrapper'\n\n/**\n * @returns The selected area\n */\nconst getVisibleSelectionRect = () => {\n    let target: DOMRect | null = null\n    // Putting it into try catch block because I observed a weird error\n    // Error: getRangeAt(0): 0 is not a valid index\n    // Couldn't replicate the error\n    try {\n        const selection = window.getSelection()?.getRangeAt(0).getClientRects()\n        if (selection?.length) {\n            if (selection[0].width === 0) target = selection[1]\n            else target = selection[0]\n        }\n    } catch (error) {\n        console.error(error)\n    }\n\n    return target\n}\n\n// ==================================== INTERFACE ===============================\n\nexport interface ToolbarConfig {\n    editor: any\n    editorRef: any\n    offsetTop?: number\n    offsetLeft?: number\n    editorPosition: {\n        top: number\n        left: number\n    }\n    toggleInlineStyle?: (inlineStyle: string) => void\n    children?: any\n}\n\ninterface IStyleButton {\n    onToggle: (style: string) => void\n    active: boolean\n    style: string\n    label: JSX.Element\n}\n\n// ==================================== HELPER COMPONENT ========================\n\nconst StyleButton = ({ onToggle, active, style, label }: IStyleButton) => {\n    const onToggleHandler = (\n        e: React.MouseEvent<HTMLSpanElement, MouseEvent>\n    ) => {\n        e.preventDefault()\n        onToggle(style)\n    }\n\n    let className = Classes.styleButton\n    if (active) {\n        className += ' ' + Classes.activeButton\n    }\n\n    return (\n        <span className={className} onMouseDown={onToggleHandler}>\n            {label}\n        </span>\n    )\n}\n\nconst INLINE_STYLES = [\n    {\n        label: <Wrapper className={Classes.icon} src={<Bold />} />,\n        style: 'BOLD'\n    },\n    {\n        label: <Wrapper className={Classes.icon} src={<Italic />} />,\n        style: 'ITALIC'\n    },\n    {\n        label: <Wrapper className={Classes.icon} src={<Underline />} />,\n        style: 'UNDERLINE'\n    }\n]\n\nconst InlineStyleControls = (props: any) => {\n    const currentStyle = props.editorState.getCurrentInlineStyle()\n\n    return (\n        <div className={Classes.controls}>\n            {INLINE_STYLES.map((type, idx) => (\n                <StyleButton\n                    key={`inline-style-${idx}`}\n                    active={currentStyle.has(type.style)}\n                    label={type.label}\n                    onToggle={props.onToggle}\n                    style={type.style}\n                />\n            ))}\n        </div>\n    )\n}\n\n// ==================================== CONSTANTS ===============================\n\nconst initialPosition = { top: -100, left: -100 }\n\n// ==================================== COMPONENT ===============================\n\nfunction InlineToolbar({\n    editor,\n    editorRef,\n    editorPosition,\n    offsetTop = 2 + 0.5,\n    offsetLeft = 2,\n    toggleInlineStyle\n}: ToolbarConfig) {\n    const [position, setPostion] = useState(initialPosition)\n\n    useEffect(() => {\n        const selectionState = editor.getSelection()\n\n        if (!selectionState.isCollapsed()) {\n            const selectionRect = getVisibleSelectionRect()\n            if (!selectionRect) return\n\n            // The toolbar shouldn't be positioned directly on top of the selected text,\n            // but rather with a small offset so the caret doesn't overlap with the text.\n            const offsetTopRem = 16 * offsetTop\n            const offsetLeftRem = 16 * offsetLeft\n            const pageoffset =\n                window.pageYOffset || document.documentElement.scrollTop\n\n            setPostion({\n                top:\n                    selectionRect.top +\n                    pageoffset -\n                    editorPosition.top -\n                    offsetTopRem,\n\n                left:\n                    selectionRect.left +\n                    selectionRect.width / 2 -\n                    editorPosition.left -\n                    offsetLeftRem\n            })\n        } else {\n            setPostion(initialPosition)\n        }\n    }, [editor, editorRef])\n\n    return (\n        <div className={Classes.toolbarContainer} style={{ ...position }}>\n            {position.top !== initialPosition.top && (\n                <InlineStyleControls\n                    editorState={editor}\n                    onToggle={toggleInlineStyle}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default InlineToolbar\n","import React from 'react'\n\nexport default function Bold() {\n    return (\n        <svg\n            height='100%'\n            width='auto'\n            viewBox='0 0 36 36'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n        >\n            <path\n                d='M24.532 16.9242C25.7133 15.6937 26.4375 14.0309 26.4375 12.2027V11.8441C26.4375 8.06133 23.3402 4.99219 19.5223 4.99219H9.11953C8.58867 4.99219 8.15625 5.42461 8.15625 5.95547V29.8301C8.15625 30.4031 8.62031 30.8672 9.19336 30.8672H20.3977C24.5109 30.8672 27.8438 27.5555 27.8438 23.4668V23.0801C27.8438 20.5137 26.5289 18.2531 24.532 16.9242ZM11.5312 8.36719H19.4309C21.4383 8.36719 23.0625 9.92812 23.0625 11.8582V12.1922C23.0625 14.1187 21.4348 15.6832 19.4309 15.6832H11.5312V8.36719ZM24.4195 23.4633C24.4195 25.6746 22.602 27.4676 20.359 27.4676H11.5312V19.0793H20.359C22.602 19.0793 24.4195 20.8723 24.4195 23.0836V23.4633Z'\n                fill='black'\n            />\n        </svg>\n    )\n}\n","import React from 'react'\n\nexport default function Italic() {\n    return (\n        <svg\n            height='100%'\n            width='auto'\n            viewBox='0 0 36 36'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n        >\n            <path\n                d='M28.0547 5.625H12.8672C12.7125 5.625 12.5859 5.75156 12.5859 5.90625V8.15625C12.5859 8.31094 12.7125 8.4375 12.8672 8.4375H19.2375L13.7531 27.5625H8.05078C7.89609 27.5625 7.76953 27.6891 7.76953 27.8438V30.0938C7.76953 30.2484 7.89609 30.375 8.05078 30.375H23.2383C23.393 30.375 23.5195 30.2484 23.5195 30.0938V27.8438C23.5195 27.6891 23.393 27.5625 23.2383 27.5625H16.6781L22.1625 8.4375H28.0547C28.2094 8.4375 28.3359 8.31094 28.3359 8.15625V5.90625C28.3359 5.75156 28.2094 5.625 28.0547 5.625Z'\n                fill='black'\n            />\n        </svg>\n    )\n}\n","import React from 'react'\n\nexport default function Underline() {\n    return (\n        <svg\n            height='100%'\n            width='auto'\n            viewBox='0 0 36 36'\n            fill='none'\n            xmlns='http://www.w3.org/2000/svg'\n        >\n            <path\n                d='M28.9688 28.2656H7.03125C6.87656 28.2656 6.75 28.3852 6.75 28.5328V30.6703C6.75 30.818 6.87656 30.9375 7.03125 30.9375H28.9688C29.1234 30.9375 29.25 30.818 29.25 30.6703V28.5328C29.25 28.3852 29.1234 28.2656 28.9688 28.2656ZM18 25.5938C20.4398 25.5938 22.732 24.641 24.4617 22.9148C26.1914 21.1887 27.1406 18.893 27.1406 16.4531V5.48438C27.1406 5.25234 26.9508 5.0625 26.7188 5.0625H24.6094C24.3773 5.0625 24.1875 5.25234 24.1875 5.48438V16.4531C24.1875 19.8633 21.4102 22.6406 18 22.6406C14.5898 22.6406 11.8125 19.8633 11.8125 16.4531V5.48438C11.8125 5.25234 11.6227 5.0625 11.3906 5.0625H9.28125C9.04922 5.0625 8.85938 5.25234 8.85938 5.48438V16.4531C8.85938 18.893 9.81211 21.1852 11.5383 22.9148C13.2645 24.6445 15.5602 25.5938 18 25.5938Z'\n                fill='black'\n            />\n        </svg>\n    )\n}\n","import React, { MouseEvent } from 'react'\nimport Classes from './index.module.css'\n\n// ===================================== INTERFACES ========================================\n\nexport interface LoginProps {\n    name: string;\n    className?: string;\n    onClick?: (event: MouseEvent) => void;\n}\n\n// ===================================== COMPONENT =========================================\n\nfunction Button({ name, className, onClick }: LoginProps) {\n    return (\n        <button\n            onClick={onClick}\n            className={[Classes.btn, className].join(' ')}>\n            {name}\n        </button>\n    )\n}\n\nexport default Button\n","import React, { useState, useCallback, useRef, useEffect } from 'react'\nimport AtomicBlockWrapper from './AtomicBlockWrapper'\nimport Classes from './index.module.css'\n\nimport {\n    Editor as DraftEditor,\n    EditorState,\n    AtomicBlockUtils,\n    RichUtils,\n    getDefaultKeyBinding,\n    convertFromRaw,\n    convertToRaw\n} from 'draft-js'\n\nimport SideToolbar from './SideToolbar'\nimport InlineToolbar from './InlineToolbar'\nimport {\n    getNodeFromKey,\n    saveToLocalStorageHOF,\n    retrieveFromLocalStorageHOF,\n    getAbsolutePosition\n} from './utility'\nimport Button from '../Button'\n\n// ======================================== INTERFACES =============================================\n\n/**\n * Interface for BlogEditor\n */\nexport interface IBlogEditor {\n    readonly?: boolean\n    content?: string\n    storageKey?: string\n    className?: string\n}\n\n// ========================================= HELPER FUNCTIONS =======================================\n\n/**\n * Assigns custom classes to the draft js blocks\n * @param ContentBlock\n */\nconst blockStyleFn = (ContentBlock: any) => {\n    const type = ContentBlock.getType()\n    switch (type) {\n        case 'header-one':\n            return Classes.editorH1\n        case 'header-two':\n            return Classes.editorH2\n        case 'blockquote':\n            return Classes.editorBlockquote\n        case 'ordered-list-item':\n            return Classes.editorOL\n        case 'unordered-list-item':\n            return Classes.editorUL\n        case 'atomic':\n            return Classes.editorAtomic\n        default:\n            return Classes.editorText\n    }\n}\n\n/**\n * Converts the javascript state object into JSON\n * and then stores it in the localstorage\n * @param data\n */\nconst saveToLocalStorage = saveToLocalStorageHOF()\n\n/**\n * Retreive the data from local storage\n */\nconst retrieveFromLocalStorage = retrieveFromLocalStorageHOF()\n\n/**\n * serializeContentState serializes the content state into string\n * @param contentState\n */\nconst serializeContentState = (contentState: any) => {\n    return JSON.stringify(convertToRaw(contentState))\n}\n\n/**\n * Receives the JSON object in string format\n * Parses it into object and the converts it into\n * a draft.js contentBlock\n * @param content\n */\nconst deserializeToContentState = (content: string) => {\n    return convertFromRaw(JSON.parse(content))\n}\n\n/**\n * Looks for older content and passed in content\n * to initialize the state\n * @param content\n */\nconst initializeEditorState = ({\n    content,\n    readonly,\n    storageKey\n}: {\n    content?: string\n    readonly?: boolean\n    storageKey: string\n}) => {\n    // If some content was passed in that initialize state from that\n    if (content) {\n        return EditorState.createWithContent(deserializeToContentState(content))\n    }\n\n    // If no content was provided then look for older saved value\n    const oldContent = retrieveFromLocalStorage({ key: storageKey })\n    if (oldContent && !readonly) {\n        return EditorState.createWithContent(\n            deserializeToContentState(oldContent)\n        )\n    }\n\n    // If no content and older saved value was found then\n    // initialize the state from an empty object\n    return EditorState.createEmpty()\n}\n\n// =====================================================================================================\n\nfunction BlogEditor({\n    readonly,\n    content,\n    className,\n    storageKey = 'article'\n}: IBlogEditor) {\n    /**\n     * Stores the state of the editor\n     */\n    const [state, setState] = useState(\n        initializeEditorState({ content, storageKey, readonly })\n    )\n\n    /**\n     * Stores the state if the code editor is active or not\n     */\n    const [editorIsUp, setEditorIsUp] = useState(false)\n\n    /**\n     * Reference to the draft editor\n     */\n    const DraftRef = useRef<DraftEditor>(null)\n\n    const DraftContainerRef = useRef<HTMLDivElement>(null)\n\n    /**\n     * saveToStorageFn stores the editor contentState\n     * into the local storage\n     */\n    const saveToStorageFn = useCallback(() => {\n        const content = state.getCurrentContent()\n        saveToLocalStorage({\n            content: serializeContentState(content),\n            key: storageKey\n        })\n    }, [state])\n\n    /**\n     * Memoized implementation of the renderer function\n     */\n    // @ts-ignore\n    const memoizedBlockRendererFn = useCallback((block) => {\n        const type = block.getType()\n        if (type === 'atomic') {\n            return {\n                component: AtomicBlockWrapper,\n                editable: false,\n                props: {\n                    language: 'javascript',\n                    height: '20rem',\n                    readonly,\n                    setEditorIsUp,\n                    onFinishEdit: (newContentState: any) => {\n                        setState(EditorState.createWithContent(newContentState))\n                    }\n                }\n            }\n        }\n    }, [])\n\n    useEffect(() => {\n        saveToStorageFn()\n    }, [saveToStorageFn, state])\n\n    /**\n     * toggleInlineStyle toggles the inline style\n     * for the draftjs blocks\n     * @param inlineStyle\n     */\n    const toggleInlineStyle = (inlineStyle: string) => {\n        setState(RichUtils.toggleInlineStyle(state, inlineStyle))\n    }\n\n    /**\n     * Handler for toggling the block type\n     * Has additional implementation to modify the\n     * behaviour of the custom code editor\n     *\n     * It ensures that the draft wrapper around the code\n     * editor has set contentEditable to false.\n     *\n     * NOTE: Not doing so will create problems like\n     * draft taking control over the input on code editor!\n     * @param blockType\n     */\n    const toggleBlockType = (blockType: string, subType?: string) => {\n        if (blockType !== 'atomic')\n            setState(RichUtils.toggleBlockType(state, blockType))\n        else {\n            // Add atomic to the current state\n            const contentState = state.getCurrentContent()\n            const contentStateWithEntity = contentState.createEntity(\n                'ATOMIC',\n                'IMMUTABLE',\n                { type: subType }\n            )\n            const entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n            const newEditorState = EditorState.set(state, {\n                currentContent: contentStateWithEntity\n            })\n            const newState = AtomicBlockUtils.insertAtomicBlock(\n                newEditorState,\n                entityKey,\n                ' '\n            )\n            setState(newState)\n\n            // Get a reference to atomic instance\n            const newContentState = newState.getCurrentContent()\n            const draftKey = newContentState.getLastBlock().getKey()\n            const atomicKey = newContentState.getKeyBefore(draftKey)\n\n            // Get the atomic node\n            // This is done asynchronously because\n            // There is usually a delay between block rendering by\n            // Draft js\n            setTimeout(() => {\n                const atomicParent = getNodeFromKey(atomicKey)\n\n                const divReferenceToAtomicParent = atomicParent as HTMLDivElement\n                if (divReferenceToAtomicParent)\n                    divReferenceToAtomicParent.contentEditable = 'false'\n            }, 0)\n        }\n    }\n\n    /**\n     * onChangeHandler wraps setState\n     * @param state\n     */\n    const onChangeHandler = (state: EditorState) => setState(state)\n\n    /**\n     * focus function handles the focus on the draft editor\n     */\n    const focus = () => {\n        if (!readonly && DraftRef.current) DraftRef.current.focus()\n    }\n\n    /**\n     * Handles the basic key commands on the editor\n     * @param command\n     * @param editorState\n     */\n    const handleKeyCommand = (command: string, editorState: EditorState) => {\n        const newState = RichUtils.handleKeyCommand(editorState, command)\n        if (newState) {\n            setState(newState)\n            return true\n        }\n        return false\n    }\n\n    /**\n     * Assigns speacial key mapping on the editor\n     * @param e\n     */\n    const mapKeyToEditorCommand = (e: any) => {\n        // Save to local storage on each key press\n        saveToStorageFn()\n\n        // Change tab functionality\n        if (e.keyCode === 9 /* TAB */) {\n            const newEditorState = RichUtils.onTab(e, state, 4 /* maxDepth */)\n            if (newEditorState !== state) {\n                setState(newEditorState)\n            }\n            return\n        }\n\n        return getDefaultKeyBinding(e)\n    }\n\n    return (\n        <div\n            ref={DraftContainerRef}\n            className={`${Classes.container} ${!readonly && Classes.editMode}`}\n        >\n            <div\n                className={[Classes.editor, className].join(' ')}\n                onClick={focus}\n            >\n                {!readonly && (\n                    <SideToolbar\n                        offSetLeft={1}\n                        offSetTop={1}\n                        editor={state}\n                        editorRef={DraftRef}\n                        toggleBlockStyle={toggleBlockType}\n                    />\n                )}\n                {!readonly && (\n                    <InlineToolbar\n                        editorPosition={getAbsolutePosition(\n                            DraftContainerRef.current\n                        )}\n                        editor={state}\n                        editorRef={DraftRef}\n                        toggleInlineStyle={toggleInlineStyle}\n                    />\n                )}\n                {/* Adding this because of incompatible types\n                // @ts-ignore */}\n                <DraftEditor\n                    spellCheck\n                    ref={DraftRef}\n                    readOnly={readonly || editorIsUp}\n                    editorState={state}\n                    onChange={onChangeHandler}\n                    blockStyleFn={blockStyleFn}\n                    keyBindingFn={mapKeyToEditorCommand}\n                    // @ts-ignore\n                    handleKeyCommand={handleKeyCommand}\n                    blockRendererFn={memoizedBlockRendererFn}\n                />\n            </div>\n            {!readonly && (\n                <Button\n                    name='Show data'\n                    onClick={() => console.log(state.toJS())}\n                    className={Classes.btn}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default BlogEditor\n","import React from 'react'\nimport './index.css'\nimport Editor, { CodeEditor } from 'saged'\nimport data from './data.json'\nimport useLocation from './useLocation'\nimport 'saged/dist/index.css'\n\nconst content = JSON.stringify(data)\n\nconst Switch = (path) => {\n    switch (true) {\n        case path === '/saged/':\n            return (\n                <div className='editor'>\n                    <Editor content={content} />\n                </div>\n            )\n        case path === '/saged/#preview':\n            return (\n                <div className='editor'>\n                    <Editor content={content} readonly />\n                </div>\n            )\n        case path === '/saged/#editor':\n            return (\n                <div className='editor'>\n                    <Editor storageKey='saged-example-item-eerTy443' />\n                </div>\n            )\n        case path === '/saged/#editor/preview':\n            return (\n                <div className='editor'>\n                    <Editor\n                        content={localStorage.getItem(\n                            'saged-example-item-eerTy443'\n                        )}\n                        readonly\n                    />\n                </div>\n            )\n        case path === '/saged/code-editor':\n            return (\n                <div className='editor'>\n                    <CodeEditor header footer/>\n                </div>\n            )\n\n        default:\n            return (\n                <div className='notfound-container'>\n                    <div className='notfound-text'>404 - Page Not Found</div>\n                </div>\n            )\n    }\n}\n\nconst App = () => {\n    // const location = window.location.pathname + window.location.hash\n    const [location, setLocation] = useLocation(\n        window.location.pathname + window.location.hash\n    )\n\n    return (\n        <div className='container'>\n            {Switch(location)}\n            <div className='btn-container'>\n                <div\n                    className='btn'\n                    onClick={() => {\n                        setLocation('/saged/')\n                    }}\n                >\n                    Editor\n                </div>\n                <div\n                    className='btn'\n                    onClick={() => {\n                        setLocation('#preview')\n                    }}\n                >\n                    Preview\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import { useState } from 'react'\n\nexport default (initial) => {\n    const [location, updateLocation] = useState(initial)\n    function setLocation(location) {\n        window.history.pushState({ data: 'any' }, location, location)\n        updateLocation(window.location.pathname + window.location.hash)\n    }\n\n    return [location, setLocation]\n}\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}