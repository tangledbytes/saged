{"version":3,"sources":["../../dist/plus~YOwKNLmC.svg","../../dist/heading~QOqIzRab.svg","../../dist/subheading~GoYdSCEx.svg","../../dist/blockquote~KUbmhmdU.svg","../../dist/unorderedlist~bfbrgOYJ.svg","../../dist/orderedlist~GrRCmwBQ.svg","../../dist/code~bnLStfXP.svg","../../dist/markdown~lbIWfMVw.svg","../../dist/bold~smduNppc.svg","../../dist/italic~bkFUWxpm.svg","../../dist/underline~dQaKFara.svg","../../src/components/CodeEditor/supportedLanguages.ts","../../src/utility/ModResizeObserver.ts","../../src/components/CodeEditor/index.tsx","../../src/components/BlogEditor/CodeEditorWrapper/index.tsx","../../src/components/MarkdownEditor/index.tsx","../../src/components/BlogEditor/MarkdownEditorWrapper/index.tsx","../../src/components/BlogEditor/AtomicBlockWrapper/index.tsx","../../src/assets/plus.svg","../../src/assets/heading.svg","../../src/assets/subheading.svg","../../src/assets/blockquote.svg","../../src/assets/unorderedlist.svg","../../src/assets/orderedlist.svg","../../src/assets/code.svg","../../src/assets/markdown.svg","../../src/components/BlogEditor/utility.ts","../../src/components/BlogEditor/SideToolbar/index.tsx","../../src/assets/bold.svg","../../src/assets/italic.svg","../../src/assets/underline.svg","../../src/components/BlogEditor/InlineToolbar/index.tsx","../../src/components/Button/index.tsx","../../src/components/BlogEditor/index.tsx","../../src/index.tsx","App.js","useLocation.js","index.js"],"names":["module","exports","SUPPORTED_LANGUAGES","abap","displayName","apex","bat","clojure","coffee","cpp","csharp","csp","css","dart","dockerfile","fsharp","go","graphql","handlebars","html","java","javascript","julia","kotlin","less","lexon","lua","markdown","mips","mysql","pascal","perl","pgsql","php","powershell","pug","python","r","ruby","rust","scss","shell","sophia","sql","swift","twig","typescript","vb","xml","yaml","constructor","callback","_element","_cachedProperty","_interval","this","setInterval","clearInterval","cachedProperty","property","ModResizeObserver","element","_observer","ResizeObserver","entries","entry","EditorBtn","options","active","className","Classes","editorBtn","onClick","e","ref","setRef","editorBtnName","SupportedLanguages","onFocus","useState","useRef","inputRef","useEffect","document","ev","onBlur","handleMouseDown","interrupt","setDisplay","onClickHander","SL","slinputContainer","slinput","placeholder","value","onChange","setValue","sllist","Object","name","key","i","sl","Header","head","cbtns","style","backgroundColor","getHeight","renderFooter","height","CodeEditor","language","code","readOnly","footer","header","currentLanguageRef","containerRef","languageSelectorRef","setDisplayHandler","setDisplayOptions","setCurrentLanguageHandler","setCurrentLanguage","observer","console","editor","displayOptions","option","currentNode","currentRef","targetNode","React","editable","currentLanguage","theme","editorDidMount","_valueGetter","_","bottom","setEditable","CodeEditorWrapper","props","contentState","blockProps","contentStateRef","entityKey","block","data","newState","setInit","memoizedOnBlur","useCallback","memoizedOnFocus","newContentState","content","init","readonly","MarkdownEditorWrapper","DomPurify","marked","contentEditable","onMouseEnter","onMouseLeave","onInput","editorIsFocused","editorIsActive","updateEditorState","AtomicBlockWrapper","type","require","getNodeFromKey","getAbsolutePosition","node","offsetTop","window","offsetLeft","rect","top","left","StyleButton","subType","onMouseDown","onToggle","BLOCK_TYPES","label","icon","src","H1","H2","Bq","Ul","Ol","Code","Md","BlockStyleControls","editorState","selection","blockType","controls","idx","SideToolbar","offSetLeft","offSetTop","memoizedClickHandler","setShow","start","currentContentBlock","currentContent","computedStyle","totalNodeHeight","parseInt","setPostion","toolbarContainer","position","iconContainer","plusIcon","Plus","drawer","show","toggleBlockStyle","blockStyle","INLINE_STYLES","Bold","Italic","Underline","InlineStyleControls","currentStyle","initialPosition","InlineToolbar","toggleInlineStyle","selectionRect","target","error","getVisibleSelectionRect","offsetTopRem","offsetLeftRem","pageoffset","editorPosition","Button","blockStyleFn","ContentBlock","saveToLocalStorage","clearTimeout","timer","setTimeout","lstore","saveToLocalStorageHOF","retrieveFromLocalStorage","deserializeToContentState","convertFromRaw","JSON","BlogEditor","storageKey","EditorState","oldContent","initializeEditorState","DraftRef","DraftContainerRef","saveToStorageFn","state","convertToRaw","memoizedBlockRendererFn","component","onFinishEdit","setState","container","editMode","editorRef","RichUtils","contentStateWithEntity","newEditorState","AtomicBlockUtils","draftKey","atomicKey","atomicParent","divReferenceToAtomicParent","inlineStyle","spellCheck","editorIsUp","keyBindingFn","getDefaultKeyBinding","handleKeyCommand","command","blockRendererFn","btn","stringify","App","initial","location","updateLocation","history","pushState","pathname","hash","useLocation","setLocation","path","localStorage","getItem","Switch","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.66971e14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plus~YOwKNLmC.c6e2430b.svg\";","module.exports = __webpack_public_path__ + \"static/media/heading~QOqIzRab.0d1155f5.svg\";","module.exports = __webpack_public_path__ + \"static/media/subheading~GoYdSCEx.1b1e8de6.svg\";","module.exports = __webpack_public_path__ + \"static/media/blockquote~KUbmhmdU.02705ada.svg\";","module.exports = __webpack_public_path__ + \"static/media/unorderedlist~bfbrgOYJ.e797468f.svg\";","module.exports = __webpack_public_path__ + \"static/media/orderedlist~GrRCmwBQ.e9866d99.svg\";","module.exports = __webpack_public_path__ + \"static/media/code~bnLStfXP.239fded4.svg\";","module.exports = __webpack_public_path__ + \"static/media/markdown~lbIWfMVw.91b80a13.svg\";","module.exports = __webpack_public_path__ + \"static/media/bold~smduNppc.1396e979.svg\";","module.exports = __webpack_public_path__ + \"static/media/italic~bkFUWxpm.d72dac67.svg\";","module.exports = __webpack_public_path__ + \"static/media/underline~dQaKFara.e281fa6a.svg\";","import { ISupportedLanguageMap } from './index'\n\nexport const SUPPORTED_LANGUAGES: ISupportedLanguageMap = {\n    abap: { displayName: \"ABAP (Advanced Business Application Programming)\" },\n    apex: { displayName: \"Apex\" },\n    bat: { displayName: \"Batch\" },\n    clojure: { displayName: \"Clojure\" },\n    coffee: { displayName: \"CoffeeScript\" },\n    cpp: { displayName: \"C++\" },\n    csharp: { displayName: \"C#\" },\n    csp: { displayName: \"CSP (Communication Sequential Processing)\" },\n    css: { displayName: \"CSS\" },\n    dart: { displayName: \"Dart\" },\n    dockerfile: { displayName: \"Dockerfile\" },\n    fsharp: { displayName: \"F#\" },\n    go: { displayName: \"Go (Golang)\" },\n    graphql: { displayName: \"Graphql\" },\n    handlebars: { displayName: \"Handlebars\" },\n    html: { displayName: \"HTML\" },\n    java: { displayName: \"Java\" },\n    javascript: { displayName: \"JavaScript\" },\n    julia: { displayName: \"Julia\" },\n    kotlin: { displayName: \"Kotlin\" },\n    less: { displayName: \"Less\" },\n    lexon: { displayName: \"Lexon\" },\n    lua: { displayName: \"Lua\" },\n    markdown: { displayName: \"Markdown\" },\n    mips: { displayName: \"MIPS\" },\n    mysql: { displayName: \"MySQL\" },\n    \"objective-c\": { displayName: \"Objective-C\" },\n    pascal: { displayName: \"Pascal\" },\n    perl: { displayName: \"Perl\" },\n    pgsql: { displayName: \"PGSQL\" },\n    php: { displayName: \"PHP\" },\n    \"\": { displayName: \"Plain Text\" },\n    powershell: { displayName: \"PowerShell\" },\n    pug: { displayName: \"pug\" },\n    python: { displayName: \"Python3\" },\n    r: { displayName: \"R\" },\n    ruby: { displayName: \"Ruby\" },\n    rust: { displayName: \"Rust\" },\n    scss: { displayName: \"SCSS\" },\n    shell: { displayName: \"Shell\" },\n    sophia: { displayName: \"Sopia\" },\n    sql: { displayName: \"SQL\" },\n    swift: { displayName: \"Swift\" },\n    twig: { displayName: \"Twig\" },\n    typescript: { displayName: \"TypeScript\" },\n    vb: { displayName: \"Visual Basic\" },\n    xml: { displayName: \"XML\" },\n    yaml: { displayName: \"YAML\" }\n}\n","export type ModResizeObserverCb = (element?: Element) => any\n\n/**\n * _ResizeObserver is a polling based resize observer\n * The API is very similar to the native resize observer\n * This observer is not performant as it keeps checking the size of\n * the provided element every 1 second (default value)\n */\nclass _ResizeObserver {\n    private _element: Element | null = null\n    private _cachedProperty: DOMRectReadOnly | null = null\n    private _interval: NodeJS.Timeout | null = null\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public callback: ModResizeObserverCb) {}\n\n    observe(element: Element) {\n        this._element = element\n        // Poll every 1second\n        this._interval = setInterval(() => {\n            if (\n                this._element &&\n                this._isDifferent(this._element.getBoundingClientRect())\n            ) {\n                this.callback(this._element)\n            }\n        }, 1000)\n    }\n\n    unobserve() {\n        // Reset element\n        this._element = null\n        // Reset interval\n        if (this._interval) clearInterval(this._interval)\n    }\n\n    private _isDifferent(property: DOMRectReadOnly): boolean {\n        if (this._cachedProperty) {\n            const cachedProperty = { ...this._cachedProperty }\n            this._cachedProperty = property\n            // If height or width is changed then return true\n            return (\n                cachedProperty.height !== property.height ||\n                cachedProperty.width !== property.width\n            )\n        }\n\n        // If there is no cached propery then there is no change to observe\n        // hence there is no different\n        return false\n    }\n}\n\n/**\n * ModResizeOberver merges the native resize observer and\n * the polling based observer and hence provides a fallback\n */\nexport default class ModResizeObserver {\n    public element: Element | null = null\n    public _observer: _ResizeObserver | ResizeObserver | null = null\n\n    constructor(callback: ModResizeObserverCb) {\n        if (ResizeObserver) {\n            // If the native resize observer is available then\n            // use this observer as it is far more performant\n            const cb: ResizeObserverCallback = (entries) => {\n                for (const entry of entries) {\n                    callback(entry.target)\n                }\n            }\n            this._observer = new ResizeObserver(cb)\n        } else {\n            // If the native resize observer is not available then\n            // fallback to the polling mechanism\n            // Polling is inefficient and hence should be avoided\n            this._observer = new _ResizeObserver(callback)\n        }\n    }\n\n    observe(element: Element) {\n        ;(this._observer as _ResizeObserver | ResizeObserver).observe(element)\n    }\n\n    unobserve(element: Element) {\n        ;(this._observer as _ResizeObserver | ResizeObserver).unobserve(element)\n    }\n}\n","import React, { useState, useRef, useEffect, Fragment } from 'react'\nimport Manoco from '@monaco-editor/react'\nimport { SUPPORTED_LANGUAGES } from './supportedLanguages'\nimport ModResizeObserver from '../../utility/ModResizeObserver'\n\nimport Classes from './index.module.css'\n\n// =============================== INTERFACES =======================================\n\nexport interface EditorProps {\n    language?: string\n    code?: string\n    readOnly?: boolean\n    className?: string\n    onChange?: (content: any, language?: string) => void\n    header?: boolean\n    footer?: boolean\n    height?: string\n    onBlur?: (event?: any) => void\n    onFocus?: (event?: any) => void\n}\n\ninterface EditorBtnProps {\n    onClick: (e: React.MouseEvent) => void\n    name: string\n    active: boolean\n    setRef?: React.RefObject<HTMLDivElement>\n    options?: boolean\n}\n\ninterface SupportedLanguagesProps {\n    onClick: (language: string) => void\n    setDisplay: () => void\n    interrupt: (\n        e: MouseEvent,\n        currentRef: React.RefObject<HTMLDivElement>\n    ) => boolean\n    onBlur?: (event?: any) => void\n    onFocus?: (event?: any) => void\n}\n\nexport interface ISupportedLanguageMap {\n    [language: string]: {\n        displayName: string\n    }\n}\n\n// ========================================== CONSTANTS ===================================================\n\nexport { SUPPORTED_LANGUAGES }\n\n// ========================================== COMPONENTS ====================================================\n\n/**\n * EditorBtn renders the functional buttons present at the bottom of the\n * monaco editor\n * @param param0\n */\nfunction EditorBtn({\n    onClick,\n    name,\n    options = false,\n    setRef,\n    active = false\n}: EditorBtnProps) {\n    const onClickHander = (e: React.MouseEvent) => {\n        onClick(e)\n    }\n\n    return (\n        <div className={Classes.editorBtn} onClick={onClickHander} ref={setRef}>\n            {options && (\n                <div\n                    className={[Classes.icon, active ? Classes.active : null]\n                        .join(' ')\n                        .trimEnd()}\n                >\n                    &#9650;\n                </div>\n            )}\n            <div className={Classes.editorBtnName}>{name}</div>\n        </div>\n    )\n}\n\n/**\n * SupportedLanguages componenet renders the supported languages\n * menu along with the search component\n * @param param0\n */\nfunction SupportedLanguages({\n    onClick,\n    setDisplay,\n    interrupt,\n    onBlur,\n    onFocus\n}: SupportedLanguagesProps) {\n    const [value, setValue] = useState<string>('')\n    const ref = useRef<HTMLDivElement>(null)\n    const inputRef = useRef<HTMLInputElement>(null)\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleMouseDown)\n        if (inputRef.current) {\n            inputRef.current.onfocus = (ev) => {\n                if (onFocus) onFocus(ev)\n            }\n\n            inputRef.current.onblur = (ev) => {\n                if (onBlur) onBlur(ev)\n            }\n\n            inputRef.current.focus()\n        }\n\n        return () => {\n            return document.removeEventListener('mousedown', handleMouseDown)\n        }\n\n        // eslint-disable-next-line\n    }, [])\n\n    const handleMouseDown = (e: MouseEvent) => {\n        if (interrupt(e, ref)) return undefined\n        else setDisplay()\n        return undefined\n    }\n\n    const onChange = (e: React.ChangeEvent) => {\n        setValue((e.target as HTMLInputElement).value)\n    }\n\n    const onClickHander = (e: React.MouseEvent) => {\n        onClick((e.target as HTMLDivElement).getAttribute('data-lid') as string)\n    }\n\n    return (\n        <div className={Classes.SL} ref={ref}>\n            <div className={Classes.slinputContainer}>\n                <input\n                    ref={inputRef}\n                    className={Classes.slinput}\n                    placeholder='Set Language'\n                    value={value}\n                    onChange={onChange}\n                />\n            </div>\n            <div className={Classes.sllist}>\n                {Object.keys(SUPPORTED_LANGUAGES).map((sl, i) => {\n                    const name = SUPPORTED_LANGUAGES[sl].displayName\n                    if (value) {\n                        if (\n                            name\n                                .toLocaleLowerCase()\n                                .startsWith(value.toLocaleLowerCase())\n                        )\n                            return (\n                                <div\n                                    key={i}\n                                    data-lid={sl}\n                                    onClick={onClickHander}\n                                >\n                                    {name}\n                                </div>\n                            )\n                    } else {\n                        return (\n                            <div key={i} data-lid={sl} onClick={onClickHander}>\n                                {name}\n                            </div>\n                        )\n                    }\n                    return null\n                })}\n            </div>\n        </div>\n    )\n}\n\n/**\n * Header returns JSX for the header of the Monaco editor\n */\nfunction Header() {\n    return (\n        <div className={Classes.head}>\n            <div\n                className={Classes.cbtns}\n                style={{ backgroundColor: '#FF5F56' }}\n            />\n            <div\n                className={Classes.cbtns}\n                style={{ backgroundColor: '#FFBD2E' }}\n            />\n            <div\n                className={Classes.cbtns}\n                style={{ backgroundColor: '#27C93F' }}\n            />\n        </div>\n    )\n}\n\n// =========================================== HELPER FUNCTION ===========================================\n\n/**\n * getHeight returns the calcualated height for the editor\n * @param renderFooter\n * @param renderHeader\n */\nfunction getHeight(renderFooter: boolean, renderHeader: boolean) {\n    let height = 0\n    const HEADER_HEIGHT = 2.25 // If height of header is changed in CSS then change it here also\n    const FOOTER_HEIGHT = 1.5 // If height of footer is changed in CSS then change it here also\n\n    if (renderFooter) height += FOOTER_HEIGHT\n\n    if (renderHeader) height += HEADER_HEIGHT\n\n    return height\n}\n\n// =========================================== COMPONENT =================================================\n\nfunction CodeEditor({\n    language = 'javascript',\n    className,\n    code = '',\n    readOnly = false,\n    onChange,\n    footer = false,\n    header = false,\n    height = '20rem',\n    onBlur,\n    onFocus\n}: EditorProps) {\n    const [currentLanguage, setCurrentLanguage] = useState<string>(language)\n    const [editable, setEditable] = useState<boolean>(!readOnly)\n    const [displayOptions, setDisplayOptions] = useState<boolean>(false)\n\n    const ref = useRef<any>(null)\n    const currentLanguageRef = useRef<string>(currentLanguage)\n    const containerRef = useRef<HTMLDivElement>(null)\n    const languageSelectorRef = useRef<HTMLDivElement>(null)\n\n    const setEditableHandler = () => setEditable(!editable)\n    const setDisplayHandler = () => setDisplayOptions(!displayOptions)\n    const setCurrentLanguageHandler = (language: string) => {\n        currentLanguageRef.current = language\n        setCurrentLanguage(language)\n    }\n\n    const handleMount = (_valueGetter: any, editor: any) => {\n        ref.current = editor\n        ref.current.onDidBlurEditorText((ev: any) => {\n            if (onBlur) onBlur(ev)\n        })\n\n        ref.current.onDidFocusEditorText((ev: any) => {\n            if (onFocus) onFocus(ev)\n        })\n\n        if (typeof onChange === 'function') {\n            ref.current.onDidChangeModelContent((_: any) => {\n                onChange(ref.current.getValue(), currentLanguageRef.current)\n            })\n        }\n    }\n\n    const interrupt = (\n        e: MouseEvent,\n        currentRef: React.RefObject<HTMLDivElement>\n    ) => {\n        const currentNode = currentRef.current as Node\n        const targetNode = e.target as Node\n        if (\n            (languageSelectorRef.current as Node).contains(targetNode) ||\n            currentNode.contains(targetNode)\n        )\n            return true\n\n        return false\n    }\n\n    useEffect(() => {\n        setCurrentLanguageHandler(language)\n    }, [language])\n\n    useEffect(() => {\n        if (containerRef.current) {\n            const observer = new ModResizeObserver(() => {\n                console.log('Observing editor...')\n                ref.current && ref.current.layout()\n            })\n\n            observer.observe(containerRef.current)\n\n            return () => {\n                containerRef.current && observer.unobserve(containerRef.current)\n                console.log('Unobserve the editor...')\n            }\n        }\n\n        return () => undefined\n    }, [])\n\n    return (\n        <div className={className} style={{ height }} ref={containerRef}>\n            <div className={Classes.editor}>\n                {displayOptions && (\n                    <div className={Classes.option}>\n                        <SupportedLanguages\n                            onBlur={onBlur}\n                            onFocus={onFocus}\n                            interrupt={interrupt}\n                            onClick={setCurrentLanguageHandler}\n                            setDisplay={setDisplayHandler}\n                        />\n                    </div>\n                )}\n                {header && <Header />}\n                <Manoco\n                    options={{ readOnly: !editable }}\n                    value={code}\n                    language={currentLanguage}\n                    theme='dark'\n                    editorDidMount={handleMount}\n                    height={`calc(100% - ${getHeight(footer, header)}rem)`}\n                />\n                {footer && (\n                    <div className={Classes.bottom}>\n                        {!readOnly && (\n                            <Fragment>\n                                <EditorBtn\n                                    active={displayOptions}\n                                    setRef={languageSelectorRef}\n                                    onClick={setDisplayHandler}\n                                    name={\n                                        SUPPORTED_LANGUAGES[currentLanguage]\n                                            .displayName\n                                    }\n                                    options\n                                />\n                                <EditorBtn\n                                    active={false}\n                                    onClick={setEditableHandler}\n                                    name={`Edit: ${editable}`}\n                                />\n                            </Fragment>\n                        )}\n                    </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default CodeEditor\n","import React, { useEffect, useState, useCallback, useRef } from 'react'\nimport Editor from '../../CodeEditor'\n\n// =================================== INTERFACES ========================================\n\nexport interface ICodeEditorWrapper {\n    blockProps: {\n        language: string\n        height: string\n        readonly: boolean\n        setEditorIsUp: (state: boolean) => void\n        onFinishEdit: (contentState: any) => void\n    }\n    block: any\n    contentState: any\n}\n\n// =================================== COMPONENTS =========================================\n\n/**\n * A wrapper for the code editor\n * @param props\n */\nconst CodeEditorWrapper = (props: ICodeEditorWrapper) => {\n    const { blockProps, block, contentState } = props\n    const [init, setInit] = useState({\n        code: '',\n        language: blockProps.language\n    })\n\n    // Had to hold a reference to the latest value of contentstate\n    // as for some reason the callback functions were getting stale\n    // value of the this prop\n    const contentStateRef = useRef<any>(contentState)\n    contentStateRef.current = contentState\n\n    // This sets the initial code while also making sure\n    // that no \"code\" prop of the Editor is not\n    // directly associated with a wrapper prop\n    // Hence it avoids rerenders on each click\n    useEffect(() => {\n        const entityKey = block.getEntityAt(0)\n\n        if (entityKey) {\n            const data = contentState.getEntity(entityKey)?.getData()\n            const newState = {\n                code: data.content,\n                language: data.language\n            }\n            setInit(newState)\n        }\n\n        // eslint-disable-next-line\n    }, [])\n\n    /**\n     * Memoized implementation of onBlur handler\n     */\n    const memoizedOnBlur = useCallback(() => {\n        blockProps.setEditorIsUp(false)\n    }, [blockProps])\n\n    /**\n     * Memoized implementation of onFocus handler\n     */\n    const memoizedOnFocus = useCallback(() => {\n        blockProps.setEditorIsUp(true)\n    }, [blockProps])\n\n    return (\n        <Editor\n            header\n            footer\n            onChange={(code: string, language?: string) => {\n                const entityKey = block.getEntityAt(0)\n                const contentState = contentStateRef.current\n                if (entityKey) {\n                    const newContentState = contentState.mergeEntityData(\n                        entityKey,\n                        {\n                            content: code,\n                            language: language || blockProps.language\n                        }\n                    )\n                    blockProps.onFinishEdit(newContentState)\n                } else console.log('OOPS')\n            }}\n            code={init.code}\n            onBlur={memoizedOnBlur}\n            onFocus={memoizedOnFocus}\n            language={init.language}\n            height={blockProps.height}\n            readOnly={blockProps.readonly}\n        />\n    )\n}\n\nexport default CodeEditorWrapper\n","import React, { useRef, useEffect, useState } from 'react'\nimport marked from 'marked'\nimport DomPurify from 'dompurify'\nimport Classes from './index.module.css'\n\nexport interface IMarkdownEditor {\n    content: string\n    readonly?: boolean\n    onFocus?: (e?: React.FocusEvent<HTMLDivElement>) => any\n    onBlur?: (e?: React.FocusEvent<HTMLDivElement>) => any\n    onMouseEnter?: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>) => any\n    onMouseLeave?: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>) => any\n    onChange?: (content?: string) => any\n}\n\nfunction MarkdownEditorWrapper({\n    content,\n    readonly,\n    onFocus,\n    onBlur,\n    onMouseEnter,\n    onMouseLeave,\n    onChange\n}: IMarkdownEditor) {\n    const [value, setValue] = useState<string>(content || '')\n\n    const ref = useRef<HTMLDivElement>(null)\n\n    useEffect(() => {\n        setValue(content || '')\n        if (ref.current)\n            ref.current.innerHTML = DomPurify.sanitize(marked(content || ''))\n    }, [content])\n\n    function focusHandler(e: React.FocusEvent<HTMLDivElement>) {\n        if (ref.current) ref.current.innerHTML = value\n        if (onFocus) onFocus(e)\n    }\n\n    function blurHandler(e: React.FocusEvent<HTMLDivElement>) {\n        if (ref.current)\n            ref.current.innerHTML = DomPurify.sanitize(marked(value))\n        if (onBlur) onBlur(e)\n    }\n\n    function inputHander() {\n        setValue(ref.current?.innerText || '')\n        if (onChange) onChange(ref.current?.innerText)\n    }\n\n    return (\n        <div\n            contentEditable={!readonly}\n            ref={ref}\n            className={Classes.md}\n            onFocus={focusHandler}\n            onBlur={blurHandler}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            onInput={inputHander}\n        />\n    )\n}\n\nexport default MarkdownEditorWrapper\n","import React, { useRef, useState, useEffect } from 'react'\nimport MarkdownEditor from '../../MarkdownEditor'\n\nexport interface IMarkdownEditorWrapper {\n    blockProps: {\n        readonly: boolean\n        content: string\n        setEditorIsUp: (state: boolean) => void\n        onFinishEdit: (contentState: any) => void\n    }\n    block: any\n    contentState: any\n}\n\nfunction MarkdownEditorWrapper(props: IMarkdownEditorWrapper) {\n    const { blockProps, block, contentState } = props\n    const [init, setInit] = useState({\n        content: ''\n    })\n\n    const editorIsFocused = useRef<boolean>(false)\n    const editorIsActive = useRef<boolean>(false)\n\n    // Had to hold a reference to the latest value of contentstate\n    // as for some reason the callback functions were getting stale\n    // value of the this prop\n    const contentStateRef = useRef<any>(contentState)\n    contentStateRef.current = contentState\n\n    // This sets the initial code while also making sure\n    // that no \"code\" prop of the Editor is not\n    // directly associated with a wrapper prop\n    // Hence it avoids rerenders on each click\n    useEffect(() => {\n        const entityKey = block.getEntityAt(0)\n        if (entityKey) {\n            const data = contentState.getEntity(entityKey)?.getData()\n            const newState = {\n                content: data.content\n            }\n            setInit(newState)\n        }\n\n        // eslint-disable-next-line\n    }, [])\n\n    function updateEditorState() {\n        if (editorIsFocused.current) blockProps.setEditorIsUp(true)\n        else if (!editorIsFocused.current) blockProps.setEditorIsUp(false)\n    }\n\n    return (\n        <MarkdownEditor\n            content={init.content}\n            readonly={blockProps.readonly}\n            onFocus={() => {\n                editorIsFocused.current = true\n                updateEditorState()\n            }}\n            onBlur={() => {\n                editorIsFocused.current = false\n                updateEditorState()\n            }}\n            onMouseEnter={() => {\n                editorIsActive.current = true\n                updateEditorState()\n            }}\n            onMouseLeave={() => {\n                editorIsActive.current = false\n                updateEditorState()\n            }}\n            onChange={(content) => {\n                const entityKey = block.getEntityAt(0)\n                console.log(entityKey)\n                const contentState = contentStateRef.current\n                if (entityKey) {\n                    console.log(content)\n                    const newContentState = contentState.mergeEntityData(\n                        entityKey,\n                        {\n                            content: content\n                        }\n                    )\n                    blockProps.onFinishEdit(newContentState)\n                } else console.log('OOPS MARKDOWN')\n            }}\n        />\n    )\n}\n\nexport default MarkdownEditorWrapper\n","import React, { Fragment } from 'react'\nimport CodeEditorWrapper from '../CodeEditorWrapper'\nimport MarkdownEditorWrapper from '../MarkdownEditorWrapper'\n\nexport interface IAtomicBlockWrapper {\n    blockProps: any\n    block: any\n    contentState: any\n}\n\nfunction AtomicBlockWrapper(props: IAtomicBlockWrapper) {\n    if (!props.block.getEntityAt(0)) return <Fragment />\n    const entity = props.contentState.getEntity(props.block.getEntityAt(0))\n    const { type } = entity.getData()\n    if (type === 'monaco') {\n        return <CodeEditorWrapper {...props} />\n    }\n\n    return <MarkdownEditorWrapper {...props} />\n}\n\nexport default AtomicBlockWrapper\n","/* loaded by smart-asset */\nexport default require(\"./plus~YOwKNLmC.svg\")","/* loaded by smart-asset */\nexport default require(\"./heading~QOqIzRab.svg\")","/* loaded by smart-asset */\nexport default require(\"./subheading~GoYdSCEx.svg\")","/* loaded by smart-asset */\nexport default require(\"./blockquote~KUbmhmdU.svg\")","/* loaded by smart-asset */\nexport default require(\"./unorderedlist~bfbrgOYJ.svg\")","/* loaded by smart-asset */\nexport default require(\"./orderedlist~GrRCmwBQ.svg\")","/* loaded by smart-asset */\nexport default require(\"./code~bnLStfXP.svg\")","/* loaded by smart-asset */\nexport default require(\"./markdown~lbIWfMVw.svg\")","export const getNodeFromKey = (key: string) => {\n    return document.querySelectorAll(`[data-offset-key=\"${key}-0-0\"]`)[0]\n}\n\nexport const getAbsolutePosition = (node: HTMLDivElement | null) => {\n    if (node) {\n        const offsetTop =\n            window.pageYOffset || document.documentElement.scrollTop\n        const offsetLeft =\n            window.pageXOffset || document.documentElement.scrollLeft\n\n        const rect = node.getBoundingClientRect()\n\n        return {\n            top: rect.top + offsetTop,\n            left: rect.left + offsetLeft\n        }\n    }\n\n    return { top: 0, left: 0 }\n}\n\nexport const saveToLocalStorageHOF = () => {\n    let timer: any\n\n    return ({\n        key = 'article',\n        content\n    }: {\n        key?: string\n        content: string\n    }) => {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n            const lstore = window.localStorage || localStorage\n            lstore.setItem(key, content)\n        }, 300)\n    }\n}\n\nexport const retrieveFromLocalStorageHOF = () => {\n    return ({ key }: { key: string }) => {\n        const lstore = window.localStorage || localStorage\n        return lstore.getItem(key)\n    }\n}\n","import React, { useState, useEffect, useCallback, useRef } from 'react'\nimport Classes from './index.module.css'\nimport Plus from '../../../assets/plus.svg'\nimport H1 from '../../../assets/heading.svg'\nimport H2 from '../../../assets/subheading.svg'\nimport Bq from '../../../assets/blockquote.svg'\nimport Ul from '../../../assets/unorderedlist.svg'\nimport Ol from '../../../assets/orderedlist.svg'\nimport Code from '../../../assets/code.svg'\nimport Md from '../../../assets/markdown.svg'\nimport { getNodeFromKey } from '../utility'\n\n// ==================================== INTERFACE ===============================\n\nexport interface ToolbarConfig {\n    editor: any\n    editorRef: any\n    toggleBlockStyle?: (blockType: string, subType?: string) => void\n    offSetLeft?: number\n    offSetTop?: number\n    children?: any\n}\n\ninterface IStyleButton {\n    onToggle: (style: string, subType?: string) => void\n    active: boolean\n    style: string\n    label: JSX.Element\n    subType?: string\n}\n\n// ==================================== HELPER COMPONENT ========================\n\nconst StyleButton = ({\n    onToggle,\n    active,\n    style,\n    label,\n    subType\n}: IStyleButton) => {\n    const onToggleHandler = (\n        e: React.MouseEvent<HTMLSpanElement, MouseEvent>\n    ) => {\n        e.preventDefault()\n        onToggle(style, subType)\n    }\n\n    let className = Classes.styleButton\n    if (active) {\n        className += ' ' + Classes.activeButton\n    }\n\n    return (\n        <span className={className} onMouseDown={onToggleHandler}>\n            {label}\n        </span>\n    )\n}\n\nconst BLOCK_TYPES = [\n    { label: <img className={Classes.icon} src={H1} />, style: 'header-one' },\n    { label: <img className={Classes.icon} src={H2} />, style: 'header-two' },\n    { label: <img className={Classes.icon} src={Bq} />, style: 'blockquote' },\n    {\n        label: <img className={Classes.icon} src={Ul} />,\n        style: 'unordered-list-item'\n    },\n    {\n        label: <img className={Classes.icon} src={Ol} />,\n        style: 'ordered-list-item'\n    },\n    {\n        label: <img className={Classes.icon} src={Code} />,\n        style: 'atomic',\n        subType: 'monaco'\n    },\n    {\n        label: <img className={Classes.icon} src={Md} />,\n        style: 'atomic',\n        subType: 'markdown'\n    }\n]\n\nconst BlockStyleControls = (props: any) => {\n    const { editorState } = props\n    const selection = editorState.getSelection()\n    const blockType = editorState\n        .getCurrentContent()\n        .getBlockForKey(selection.getStartKey())\n        .getType()\n\n    return (\n        <div className={Classes.controls}>\n            {BLOCK_TYPES.map((type, idx) => (\n                <StyleButton\n                    key={`${type.style}-${idx}`}\n                    active={type.style === blockType}\n                    label={type.label}\n                    onToggle={props.onToggle}\n                    style={type.style}\n                    subType={type.subType}\n                />\n            ))}\n        </div>\n    )\n}\n// ==================================== COMPONENT ===============================\n\nfunction SideToolbar({\n    editor,\n    editorRef,\n    toggleBlockStyle,\n    offSetLeft = 2,\n    offSetTop = 1\n}: ToolbarConfig) {\n    const [position, setPostion] = useState({ top: 0, left: 0 })\n    const [show, setShow] = useState(false)\n    const ref = useRef<HTMLDivElement>(null)\n\n    /**\n     * memoizedClickHandler handles the mouse clicks\n     * Changes the state according to the location of\n     * mouse click\n     */\n    const memoizedClickHandler = useCallback((ev: MouseEvent) => {\n        if (ref.current?.contains(ev.target as Node)) return\n        setShow(false)\n    }, [])\n\n    useEffect(() => {\n        document.addEventListener('mousedown', memoizedClickHandler)\n\n        return () =>\n            document.removeEventListener('mousedown', memoizedClickHandler)\n    }, [memoizedClickHandler])\n\n    useEffect(() => {\n        const selectionState = editor.getSelection()\n        const start = selectionState.getStartKey()\n        const currentContent = editor.getCurrentContent()\n        const currentContentBlock = currentContent.getBlockForKey(start)\n\n        const node = getNodeFromKey(\n            currentContentBlock.getKey()\n        ) as HTMLDivElement\n\n        const computedStyle = window.getComputedStyle(node)\n        const totalNodeHeight = parseInt(computedStyle.height)\n\n        setPostion({\n            left: -(16 * offSetLeft),\n            top: node.offsetTop + totalNodeHeight / 2 + 16 * offSetTop\n        })\n    }, [editor, editorRef])\n\n    return (\n        <div className={Classes.toolbarContainer} style={{ ...position }}>\n            <div\n                className={Classes.iconContainer}\n                onClick={() => setShow(!show)}\n            >\n                <img className={Classes.plusIcon} src={Plus} />\n            </div>\n            <div\n                ref={ref}\n                className={`${Classes.drawer} ${\n                    !show ? Classes.hide : Classes.show\n                }`}\n            >\n                <BlockStyleControls\n                    editorState={editor}\n                    onToggle={(blockStyle: string, subType?: string) => {\n                        toggleBlockStyle &&\n                            toggleBlockStyle(blockStyle, subType)\n                        setShow(false)\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default SideToolbar\n","/* loaded by smart-asset */\nexport default require(\"./bold~smduNppc.svg\")","/* loaded by smart-asset */\nexport default require(\"./italic~bkFUWxpm.svg\")","/* loaded by smart-asset */\nexport default require(\"./underline~dQaKFara.svg\")","import React, { useState, useEffect } from 'react'\nimport Classes from './index.module.css'\nimport Bold from '../../../assets/bold.svg'\nimport Italic from '../../../assets/italic.svg'\nimport Underline from '../../../assets/underline.svg'\n\n/**\n * @returns The selected area\n */\nconst getVisibleSelectionRect = () => {\n    let target: DOMRect | null = null\n    // Putting it into try catch block because I observed a weird error\n    // Error: getRangeAt(0): 0 is not a valid index\n    // Couldn't replicate the error\n    try {\n        const selection = window.getSelection()?.getRangeAt(0).getClientRects()\n        if (selection?.length) {\n            if (selection[0].width === 0) target = selection[1]\n            else target = selection[0]\n        }\n    } catch (error) {\n        console.error(error)\n    }\n\n    return target\n}\n\n// ==================================== INTERFACE ===============================\n\nexport interface ToolbarConfig {\n    editor: any\n    editorRef: any\n    offsetTop?: number\n    offsetLeft?: number\n    editorPosition: {\n        top: number\n        left: number\n    }\n    toggleInlineStyle?: (inlineStyle: string) => void\n    children?: any\n}\n\ninterface IStyleButton {\n    onToggle: (style: string) => void\n    active: boolean\n    style: string\n    label: JSX.Element\n}\n\n// ==================================== HELPER COMPONENT ========================\n\nconst StyleButton = ({ onToggle, active, style, label }: IStyleButton) => {\n    const onToggleHandler = (\n        e: React.MouseEvent<HTMLSpanElement, MouseEvent>\n    ) => {\n        e.preventDefault()\n        onToggle(style)\n    }\n\n    let className = Classes.styleButton\n    if (active) {\n        className += ' ' + Classes.activeButton\n    }\n\n    return (\n        <span className={className} onMouseDown={onToggleHandler}>\n            {label}\n        </span>\n    )\n}\n\nconst INLINE_STYLES = [\n    { label: <img className={Classes.icon} src={Bold} />, style: 'BOLD' },\n    { label: <img className={Classes.icon} src={Italic} />, style: 'ITALIC' },\n    {\n        label: <img className={Classes.icon} src={Underline} />,\n        style: 'UNDERLINE'\n    }\n]\n\nconst InlineStyleControls = (props: any) => {\n    const currentStyle = props.editorState.getCurrentInlineStyle()\n\n    return (\n        <div className={Classes.controls}>\n            {INLINE_STYLES.map((type, idx) => (\n                <StyleButton\n                    key={`inline-style-${idx}`}\n                    active={currentStyle.has(type.style)}\n                    label={type.label}\n                    onToggle={props.onToggle}\n                    style={type.style}\n                />\n            ))}\n        </div>\n    )\n}\n\n// ==================================== CONSTANTS ===============================\n\nconst initialPosition = { top: -100, left: -100 }\n\n// ==================================== COMPONENT ===============================\n\nfunction InlineToolbar({\n    editor,\n    editorRef,\n    editorPosition,\n    offsetTop = 2 + 0.5,\n    offsetLeft = 2,\n    toggleInlineStyle\n}: ToolbarConfig) {\n    const [position, setPostion] = useState(initialPosition)\n\n    useEffect(() => {\n        const selectionState = editor.getSelection()\n\n        if (!selectionState.isCollapsed()) {\n            const selectionRect = getVisibleSelectionRect()\n            if (!selectionRect) return\n\n            // The toolbar shouldn't be positioned directly on top of the selected text,\n            // but rather with a small offset so the caret doesn't overlap with the text.\n            const offsetTopRem = 16 * offsetTop\n            const offsetLeftRem = 16 * offsetLeft\n            const pageoffset =\n                window.pageYOffset || document.documentElement.scrollTop\n\n            setPostion({\n                top:\n                    selectionRect.top +\n                    pageoffset -\n                    editorPosition.top -\n                    offsetTopRem,\n\n                left:\n                    selectionRect.left +\n                    selectionRect.width / 2 -\n                    editorPosition.left -\n                    offsetLeftRem\n            })\n        } else {\n            setPostion(initialPosition)\n        }\n    }, [editor, editorRef])\n\n    return (\n        <div className={Classes.toolbarContainer} style={{ ...position }}>\n            {position.top !== initialPosition.top && (\n                <InlineStyleControls\n                    editorState={editor}\n                    onToggle={toggleInlineStyle}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default InlineToolbar\n","import React, { MouseEvent } from 'react'\nimport Classes from './index.module.css'\n\n// ===================================== INTERFACES ========================================\n\nexport interface LoginProps {\n    name: string;\n    className?: string;\n    onClick?: (event: MouseEvent) => void;\n}\n\n// ===================================== COMPONENT =========================================\n\nfunction Button({ name, className, onClick }: LoginProps) {\n    return (\n        <button\n            onClick={onClick}\n            className={[Classes.btn, className].join(' ')}>\n            {name}\n        </button>\n    )\n}\n\nexport default Button\n","import React, { useState, useCallback, useRef, useEffect } from 'react'\nimport AtomicBlockWrapper from './AtomicBlockWrapper'\nimport Classes from './index.module.css'\n\nimport {\n    Editor as DraftEditor,\n    EditorState,\n    AtomicBlockUtils,\n    RichUtils,\n    getDefaultKeyBinding,\n    convertFromRaw,\n    convertToRaw\n} from 'draft-js'\n\n// Don't remove this! Check https://draftjs.org/docs/advanced-topics-issues-and-pitfalls#missing-draftcss\nimport 'draft-js/dist/Draft.css'\n\nimport SideToolbar from './SideToolbar'\nimport InlineToolbar from './InlineToolbar'\nimport {\n    getNodeFromKey,\n    saveToLocalStorageHOF,\n    retrieveFromLocalStorageHOF,\n    getAbsolutePosition\n} from './utility'\nimport Button from '../Button'\n\n// ======================================== INTERFACES =============================================\n\n/**\n * Interface for BlogEditor\n */\nexport interface IBlogEditor {\n    readonly?: boolean\n    content?: string\n    storageKey?: string\n    className?: string\n}\n\n// ========================================= HELPER FUNCTIONS =======================================\n\n/**\n * Assigns custom classes to the draft js blocks\n * @param ContentBlock\n */\nconst blockStyleFn = (ContentBlock: any) => {\n    const type = ContentBlock.getType()\n    switch (type) {\n        case 'header-one':\n            return Classes.editorH1\n        case 'header-two':\n            return Classes.editorH2\n        case 'blockquote':\n            return Classes.editorBlockquote\n        case 'ordered-list-item':\n            return Classes.editorOL\n        case 'unordered-list-item':\n            return Classes.editorUL\n        case 'atomic':\n            return Classes.editorAtomic\n        default:\n            return Classes.editorText\n    }\n}\n\n/**\n * Converts the javascript state object into JSON\n * and then stores it in the localstorage\n * @param data\n */\nconst saveToLocalStorage = saveToLocalStorageHOF()\n\n/**\n * Retreive the data from local storage\n */\nconst retrieveFromLocalStorage = retrieveFromLocalStorageHOF()\n\n/**\n * serializeContentState serializes the content state into string\n * @param contentState\n */\nconst serializeContentState = (contentState: any) => {\n    return JSON.stringify(convertToRaw(contentState))\n}\n\n/**\n * Receives the JSON object in string format\n * Parses it into object and the converts it into\n * a draft.js contentBlock\n * @param content\n */\nconst deserializeToContentState = (content: string) => {\n    return convertFromRaw(JSON.parse(content))\n}\n\n/**\n * Looks for older content and passed in content\n * to initialize the state\n * @param content\n */\nconst initializeEditorState = ({\n    content,\n    readonly,\n    storageKey\n}: {\n    content?: string\n    readonly?: boolean\n    storageKey: string\n}) => {\n    // If some content was passed in that initialize state from that\n    if (content) {\n        return EditorState.createWithContent(deserializeToContentState(content))\n    }\n\n    // If no content was provided then look for older saved value\n    const oldContent = retrieveFromLocalStorage({ key: storageKey })\n    if (oldContent && !readonly) {\n        return EditorState.createWithContent(\n            deserializeToContentState(oldContent)\n        )\n    }\n\n    // If no content and older saved value was found then\n    // initialize the state from an empty object\n    return EditorState.createEmpty()\n}\n\n// =====================================================================================================\n\nfunction BlogEditor({\n    readonly,\n    content,\n    className,\n    storageKey = 'article'\n}: IBlogEditor) {\n    /**\n     * Stores the state of the editor\n     */\n    const [state, setState] = useState(\n        initializeEditorState({ content, storageKey, readonly })\n    )\n\n    /**\n     * Stores the state if the code editor is active or not\n     */\n    const [editorIsUp, setEditorIsUp] = useState(false)\n\n    /**\n     * Reference to the draft editor\n     */\n    const DraftRef = useRef<DraftEditor>(null)\n\n    const DraftContainerRef = useRef<HTMLDivElement>(null)\n\n    /**\n     * saveToStorageFn stores the editor contentState\n     * into the local storage\n     */\n    const saveToStorageFn = useCallback(() => {\n        const content = state.getCurrentContent()\n        saveToLocalStorage({\n            content: serializeContentState(content),\n            key: storageKey\n        })\n    }, [state])\n\n    /**\n     * Memoized implementation of the renderer function\n     */\n    // @ts-ignore\n    const memoizedBlockRendererFn = useCallback((block) => {\n        const type = block.getType()\n        if (type === 'atomic') {\n            return {\n                component: AtomicBlockWrapper,\n                editable: false,\n                props: {\n                    language: 'javascript',\n                    height: '20rem',\n                    readonly,\n                    setEditorIsUp,\n                    onFinishEdit: (newContentState: any) => {\n                        setState(EditorState.createWithContent(newContentState))\n                    }\n                }\n            }\n        }\n    }, [])\n\n    useEffect(() => {\n        saveToStorageFn()\n    }, [saveToStorageFn, state])\n\n    /**\n     * toggleInlineStyle toggles the inline style\n     * for the draftjs blocks\n     * @param inlineStyle\n     */\n    const toggleInlineStyle = (inlineStyle: string) => {\n        setState(RichUtils.toggleInlineStyle(state, inlineStyle))\n    }\n\n    /**\n     * Handler for toggling the block type\n     * Has additional implementation to modify the\n     * behaviour of the custom code editor\n     *\n     * It ensures that the draft wrapper around the code\n     * editor has set contentEditable to false.\n     *\n     * NOTE: Not doing so will create problems like\n     * draft taking control over the input on code editor!\n     * @param blockType\n     */\n    const toggleBlockType = (blockType: string, subType?: string) => {\n        if (blockType !== 'atomic')\n            setState(RichUtils.toggleBlockType(state, blockType))\n        else {\n            // Add atomic to the current state\n            const contentState = state.getCurrentContent()\n            const contentStateWithEntity = contentState.createEntity(\n                'ATOMIC',\n                'IMMUTABLE',\n                { type: subType }\n            )\n            const entityKey = contentStateWithEntity.getLastCreatedEntityKey()\n            const newEditorState = EditorState.set(state, {\n                currentContent: contentStateWithEntity\n            })\n            const newState = AtomicBlockUtils.insertAtomicBlock(\n                newEditorState,\n                entityKey,\n                ' '\n            )\n            setState(newState)\n\n            // Get a reference to atomic instance\n            const newContentState = newState.getCurrentContent()\n            const draftKey = newContentState.getLastBlock().getKey()\n            const atomicKey = newContentState.getKeyBefore(draftKey)\n\n            // Get the atomic node\n            // This is done asynchronously because\n            // There is usually a delay between block rendering by\n            // Draft js\n            setTimeout(() => {\n                const atomicParent = getNodeFromKey(atomicKey)\n\n                const divReferenceToAtomicParent = atomicParent as HTMLDivElement\n                if (divReferenceToAtomicParent)\n                    divReferenceToAtomicParent.contentEditable = 'false'\n            }, 0)\n        }\n    }\n\n    /**\n     * onChangeHandler wraps setState\n     * @param state\n     */\n    const onChangeHandler = (state: EditorState) => setState(state)\n\n    /**\n     * focus function handles the focus on the draft editor\n     */\n    const focus = () => {\n        if (!readonly && DraftRef.current) DraftRef.current.focus()\n    }\n\n    /**\n     * Handles the basic key commands on the editor\n     * @param command\n     * @param editorState\n     */\n    const handleKeyCommand = (command: string, editorState: EditorState) => {\n        const newState = RichUtils.handleKeyCommand(editorState, command)\n        if (newState) {\n            setState(newState)\n            return true\n        }\n        return false\n    }\n\n    /**\n     * Assigns speacial key mapping on the editor\n     * @param e\n     */\n    const mapKeyToEditorCommand = (e: any) => {\n        // Save to local storage on each key press\n        saveToStorageFn()\n\n        // Change tab functionality\n        if (e.keyCode === 9 /* TAB */) {\n            const newEditorState = RichUtils.onTab(e, state, 4 /* maxDepth */)\n            if (newEditorState !== state) {\n                setState(newEditorState)\n            }\n            return\n        }\n\n        return getDefaultKeyBinding(e)\n    }\n\n    return (\n        <div\n            ref={DraftContainerRef}\n            className={`${Classes.container} ${!readonly && Classes.editMode}`}\n        >\n            <div\n                className={[Classes.editor, className].join(' ')}\n                onClick={focus}\n            >\n                {!readonly && (\n                    <SideToolbar\n                        offSetLeft={1}\n                        offSetTop={1}\n                        editor={state}\n                        editorRef={DraftRef}\n                        toggleBlockStyle={toggleBlockType}\n                    />\n                )}\n                {!readonly && (\n                    <InlineToolbar\n                        editorPosition={getAbsolutePosition(\n                            DraftContainerRef.current\n                        )}\n                        editor={state}\n                        editorRef={DraftRef}\n                        toggleInlineStyle={toggleInlineStyle}\n                    />\n                )}\n                {/* Adding this because of incompatible types\n                // @ts-ignore */}\n                <DraftEditor\n                    spellCheck\n                    ref={DraftRef}\n                    readOnly={readonly || editorIsUp}\n                    editorState={state}\n                    onChange={onChangeHandler}\n                    blockStyleFn={blockStyleFn}\n                    keyBindingFn={mapKeyToEditorCommand}\n                    // @ts-ignore\n                    handleKeyCommand={handleKeyCommand}\n                    blockRendererFn={memoizedBlockRendererFn}\n                />\n            </div>\n            {!readonly && (\n                <Button\n                    name='Show data'\n                    onClick={() => console.log(state.toJS())}\n                    className={Classes.btn}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default BlogEditor\n","import React from 'react'\n// eslint-disable-next-line no-unused-vars\nimport BlogEditor, { IBlogEditor } from './components/BlogEditor'\n\nconst Editor = (props: IBlogEditor): JSX.Element => {\n    return <BlogEditor {...props} />\n}\n\nexport default Editor\n","import React from 'react'\nimport './index.css'\nimport Editor from 'saged'\nimport 'saged/dist/index.css'\nimport data from './data.json'\nimport useLocation from './useLocation'\n\nconst content = JSON.stringify(data)\n\nconst Switch = (path) => {\n    switch (true) {\n        case path === '/saged/':\n            return (\n                <div className='editor'>\n                    <Editor content={content} />\n                </div>\n            )\n        case path === '/saged/#preview':\n            return (\n                <div className='editor'>\n                    <Editor content={content} readonly />\n                </div>\n            )\n        case path === '/saged/#editor':\n            return (\n                <div className='editor'>\n                    <Editor />\n                </div>\n            )\n        case path === '/saged/#editor/preview':\n            return (\n                <div className='editor'>\n                    <Editor content={localStorage.getItem('item')} readonly />\n                </div>\n            )\n\n        default:\n            return (\n                <div className='notfound-container'>\n                    <div className='notfound-text'>404 - Page Not Found</div>\n                </div>\n            )\n    }\n}\n\nconst App = () => {\n    // const location = window.location.pathname + window.location.hash\n    const [location, setLocation] = useLocation(\n        window.location.pathname + window.location.hash\n    )\n\n    return (\n        <div className='container'>\n            {Switch(location)}\n            <div className='btn-container'>\n                <div\n                    className='btn'\n                    onClick={() => {\n                        setLocation('/saged/')\n                    }}\n                >\n                    Editor\n                </div>\n                <div\n                    className='btn'\n                    onClick={() => {\n                        setLocation('#preview')\n                    }}\n                >\n                    Preview\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import { useState } from 'react'\n\nexport default (initial) => {\n    const [location, updateLocation] = useState(initial)\n    function setLocation(location) {\n        window.history.pushState({ data: 'any' }, location, location)\n        updateLocation(window.location.pathname + window.location.hash)\n    }\n\n    return [location, setLocation]\n}\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}